import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-BDBgVDrJ.js";const e={},o=t(`<p><code>row_factory</code> must be used when you want to process result from Database in a custom way and return something different from dictionary.</p><p><code>row_factory</code> requires a function that accepts parameter <code>Dict[str, typing.Any]</code> and can return anything you want.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><code>row_factory</code> can be a function or a class with <code>__call__</code> method which returns target converted instance.</p></div><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example:</span></a></h3><p>We create custom class and function with this class as a parameter and return function which will be used in processing row from database.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@dataclass</span>
<span class="token keyword">class</span> <span class="token class-name">ValidationTestModel</span><span class="token punctuation">:</span>
    <span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token builtin">int</span>
    name<span class="token punctuation">:</span> <span class="token builtin">str</span>

<span class="token keyword">def</span> <span class="token function">to_class</span><span class="token punctuation">(</span>
    class_<span class="token punctuation">:</span> Type<span class="token punctuation">[</span>ValidationTestModel<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Callable<span class="token punctuation">[</span><span class="token punctuation">[</span>Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ValidationTestModel<span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">to_class_inner</span><span class="token punctuation">(</span>row<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ValidationTestModel<span class="token punctuation">:</span>
        <span class="token keyword">return</span> class_<span class="token punctuation">(</span><span class="token operator">**</span>row<span class="token punctuation">)</span>

    <span class="token keyword">return</span> to_class_inner

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    conn_result <span class="token operator">=</span> <span class="token keyword">await</span> psql_pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        querystring<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&quot;SELECT * FROM </span><span class="token interpolation"><span class="token punctuation">{</span>table_name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    class_res <span class="token operator">=</span> conn_result<span class="token punctuation">.</span>row_factory<span class="token punctuation">(</span>row_factory<span class="token operator">=</span>to_class<span class="token punctuation">(</span>ValidationTestModel<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">assert</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>class_res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ValidationTestModel<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),c=[o];function p(i,r){return a(),s("div",null,c)}const d=n(e,[["render",p],["__file","overall_usage.html.vue"]]),k=JSON.parse('{"path":"/usage/row_factories/overall_usage.html","title":"Generic usage of row_factory","lang":"en-US","frontmatter":{"title":"Generic usage of row_factory","description":"row_factory must be used when you want to process result from Database in a custom way and return something different from dictionary. row_factory requires a function that accep...","head":[["meta",{"property":"og:url","content":"https://qaspen-python.github.io/usage/row_factories/overall_usage.html"}],["meta",{"property":"og:site_name","content":"PSQLPy"}],["meta",{"property":"og:title","content":"Generic usage of row_factory"}],["meta",{"property":"og:description","content":"row_factory must be used when you want to process result from Database in a custom way and return something different from dictionary. row_factory requires a function that accep..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-27T23:09:53.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T23:09:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Generic usage of row_factory\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-27T23:09:53.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"Example:","slug":"example","link":"#example","children":[]}],"git":{"createdTime":1719529793000,"updatedTime":1719529793000,"contributors":[{"name":"chandr-andr (Kiselev Aleksandr)","email":"chandr@chandr.net","commits":1}]},"filePathRelative":"usage/row_factories/overall_usage.md","localizedDate":"June 27, 2024","autoDesc":true,"excerpt":"<p><code>row_factory</code> must be used when you want to process result from Database in a custom way and return something different from dictionary.</p>\\n<p><code>row_factory</code> requires a function that accepts parameter <code>Dict[str, typing.Any]</code> and can return anything you want.</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">Tips</p>\\n<p><code>row_factory</code> can be a function or a class with <code>__call__</code> method which returns target converted instance.</p>\\n</div>"}');export{d as comp,k as data};
