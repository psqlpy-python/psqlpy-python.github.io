import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as s,e as a}from"./app-Q5jmdtE9.js";const e={},o=a(`<p>PSQLPy has additional types due to the inability to accurately recognize the type passed from Python.</p><p>All extra types available from Python with mapping to PostgreSQL type and Rust type.</p><table><thead><tr><th style="text-align:center;">PSQLPy type</th><th style="text-align:center;">PostgreSQL type</th><th style="text-align:center;">Rust Type</th></tr></thead><tbody><tr><td style="text-align:center;">BigInt</td><td style="text-align:center;">BigInt</td><td style="text-align:center;">i64</td></tr><tr><td style="text-align:center;">Integer</td><td style="text-align:center;">Integer</td><td style="text-align:center;">i32</td></tr><tr><td style="text-align:center;">SmallInt</td><td style="text-align:center;">SmallInt</td><td style="text-align:center;">i16</td></tr><tr><td style="text-align:center;">Float32</td><td style="text-align:center;">FLOAT4</td><td style="text-align:center;">f32</td></tr><tr><td style="text-align:center;">Float64</td><td style="text-align:center;">FLOAT8</td><td style="text-align:center;">f64</td></tr><tr><td style="text-align:center;">PyVarChar</td><td style="text-align:center;">VarChar</td><td style="text-align:center;">String</td></tr><tr><td style="text-align:center;">PyText</td><td style="text-align:center;">Text</td><td style="text-align:center;">String</td></tr><tr><td style="text-align:center;">PyJSON</td><td style="text-align:center;">JSON</td><td style="text-align:center;">serde::Value</td></tr><tr><td style="text-align:center;">PyJSONB</td><td style="text-align:center;">JSONB</td><td style="text-align:center;">serde::Value</td></tr><tr><td style="text-align:center;">PyMacAddr6</td><td style="text-align:center;">MacAddr</td><td style="text-align:center;">MacAddr6</td></tr><tr><td style="text-align:center;">PyMacAddr8</td><td style="text-align:center;">MacAddr8</td><td style="text-align:center;">MacAddr8</td></tr></tbody></table><h2 id="bigint-integer-smallint-float32-float64" tabindex="-1"><a class="header-anchor" href="#bigint-integer-smallint-float32-float64"><span>BigInt &amp; Integer &amp; SmallInt &amp; Float32 &amp; Float64</span></a></h2><p>When integer is passed from Python to Rust, it&#39;s impossible to understand what type is required on the Database side. Because of this restriction if you are trying to insert or update number value, you need to specify type on Python side explicitly.</p><p>Let&#39;s assume we have table <code>numbers</code> in the database:</p><table><thead><tr><th style="text-align:center;">database type</th><th style="text-align:center;">database column name</th></tr></thead><tbody><tr><td style="text-align:center;">SmallInt</td><td style="text-align:center;">index</td></tr><tr><td style="text-align:center;">Integer</td><td style="text-align:center;">elf_life</td></tr><tr><td style="text-align:center;">BigInt</td><td style="text-align:center;">elon_musk_money</td></tr><tr><td style="text-align:center;">FLOAT4</td><td style="text-align:center;">rest_money</td></tr><tr><td style="text-align:center;">FLOAT8</td><td style="text-align:center;">company_money</td></tr></tbody></table><p>And we want to INSERT new data to this table:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Final

<span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> ConnectionPool<span class="token punctuation">,</span> QueryResult
<span class="token keyword">from</span> psqlpy<span class="token punctuation">.</span>extra_types <span class="token keyword">import</span> SmallInt<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> BigInt<span class="token punctuation">,</span> Float32<span class="token punctuation">,</span> Float64


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># It uses default connection parameters</span>
    db_pool<span class="token punctuation">:</span> Final <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        <span class="token string">&quot;INSERT INTO numbers (index, elf_life, elon_musk_money) VALUES ($1, $2, $3, $4, $5)&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>SmallInt<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">(</span><span class="token number">10500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BigInt<span class="token punctuation">(</span><span class="token number">300000000000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Float32<span class="token punctuation">(</span><span class="token number">123.11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Float64<span class="token punctuation">(</span><span class="token number">222.12</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    db_pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>These types are limited only by the upper bound. These classes work not only as wrappers, but also as validators. For example, you can&#39;t pass integer bigger than 32,768 to SmallInt type.</p></div><h2 id="pyvarchar-pytext" tabindex="-1"><a class="header-anchor" href="#pyvarchar-pytext"><span>PyVarChar &amp; PyText</span></a></h2><p>When you need to pass string from Python to PSQLPy and this string must converted into Text PostgreSQL, you need to explicitly mark your string as <code>PyText</code>. If you don&#39;t work with PostgreSQL <code>TEXT</code> type, you can pass python <code>str</code> without any extra type.</p><p>Let&#39;s assume we have table <code>banners</code> in the database:</p><table><thead><tr><th style="text-align:center;">database type</th><th style="text-align:center;">database column name</th></tr></thead><tbody><tr><td style="text-align:center;">VarChar</td><td style="text-align:center;">title</td></tr><tr><td style="text-align:center;">Text</td><td style="text-align:center;">description</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Final

<span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> ConnectionPool<span class="token punctuation">,</span> QueryResult
<span class="token keyword">from</span> psqlpy<span class="token punctuation">.</span>extra_types <span class="token keyword">import</span> PyText


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># It uses default connection parameters</span>
    db_pool<span class="token punctuation">:</span> Final <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        <span class="token string">&quot;INSERT INTO banners (title, description) VALUES ($1, $2)&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;SomeTitle&quot;</span><span class="token punctuation">,</span> PyText<span class="token punctuation">(</span><span class="token string">&quot;Very long description&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token comment"># Alternatively, you can do this:</span>
    <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        <span class="token string">&quot;INSERT INTO banners (title, description) VALUES ($1, $2)&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>PyVarChar<span class="token punctuation">(</span><span class="token string">&quot;SomeTitle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> PyText<span class="token punctuation">(</span><span class="token string">&quot;Very long description&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    db_pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pyjson-pyjsonb" tabindex="-1"><a class="header-anchor" href="#pyjson-pyjsonb"><span>PyJSON &amp; PyJSONB</span></a></h2><p><code>PyJSON</code>/<code>PyJSONB</code> type exists only for situations when you want to set list of something to JSON/JSONB field. If you have default Python dict like above, you DON&#39;T have to use <code>PyJSON</code>/<code>PyJSONB</code> type.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>my_dict <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;just&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;regular&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;python&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;dictionary&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;of&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;values&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;with&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;nested&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;values&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On the other side, if you want to set list of values to JSON/JSONB field, you must wrap it in <code>PyJSON</code>/<code>PyJSONB</code> type, otherwise <code>PSQLPy</code> will assume that you passed an array (PostgreSQL <code>ARRAY</code>).</p><p>Let&#39;s assume we have table <code>users</code> in the database, and field <code>additional_user_info</code> can contain different type of data:</p><table><thead><tr><th style="text-align:center;">database type</th><th style="text-align:center;">database column name</th></tr></thead><tbody><tr><td style="text-align:center;">JSONB</td><td style="text-align:center;">additional_user_info</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Final

<span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> ConnectionPool<span class="token punctuation">,</span> QueryResult
<span class="token keyword">from</span> psqlpy<span class="token punctuation">.</span>extra_types <span class="token keyword">import</span> PyJSON


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># It uses default connection parameters</span>
    db_pool<span class="token punctuation">:</span> Final <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>
    list_for_jsonb_field <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token string">&quot;some&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;dict&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>
            <span class="token punctuation">{</span><span class="token string">&quot;nested&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;list of dicts&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>

    dict_for_jsonb_field <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;regular&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;dict&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;with&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;of&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;values&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        <span class="token string">&quot;INSERT INTO users (additional_user_info) VALUES ($1)&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>PyJSONB<span class="token punctuation">(</span>list_for_jsonb_field<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        <span class="token string">&quot;INSERT INTO users (additional_user_info) VALUES ($1)&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>dict_for_jsonb_field<span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

    db_pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pymacaddr6-pymacaddr8" tabindex="-1"><a class="header-anchor" href="#pymacaddr6-pymacaddr8"><span>PyMacAddr6 &amp; PyMacAddr8</span></a></h2><p>Mac addresses must be used with <code>PyMacAddr6</code> and <code>PyMacAddr8</code> types.</p><p>Let&#39;s assume we have table <code>devices</code> in the database:</p><table><thead><tr><th style="text-align:center;">database type</th><th style="text-align:center;">database column name</th></tr></thead><tbody><tr><td style="text-align:center;">MACADDR</td><td style="text-align:center;">device_macaddr6</td></tr><tr><td style="text-align:center;">MACADDR8</td><td style="text-align:center;">device_macaddr8</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Final

<span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> ConnectionPool<span class="token punctuation">,</span> QueryResult
<span class="token keyword">from</span> psqlpy<span class="token punctuation">.</span>extra_types <span class="token keyword">import</span> PyMacAddr6<span class="token punctuation">,</span> PyMacAddr8


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># It uses default connection parameters</span>
    db_pool<span class="token punctuation">:</span> Final <span class="token operator">=</span> ConnectionPool<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        <span class="token string">&quot;INSERT INTO devices (device_macaddr6, device_macaddr8) VALUES ($1, $2)&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>
            PyMacAddr6<span class="token punctuation">(</span><span class="token string">&quot;08:00:2b:01:02:03&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            PyMacAddr8<span class="token punctuation">(</span><span class="token string">&quot;08:00:2b:01:02:03:04:05&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

    db_pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),p=[o];function l(i,c){return t(),s("div",null,p)}const u=n(e,[["render",l],["__file","extra_types.html.vue"]]),y=JSON.parse('{"path":"/usage/types/extra_types.html","title":"Extra Types","lang":"en-US","frontmatter":{"title":"Extra Types","description":"PSQLPy has additional types due to the inability to accurately recognize the type passed from Python. All extra types available from Python with mapping to PostgreSQL type and R...","head":[["meta",{"property":"og:url","content":"https://psqlpy-python.github.io/usage/types/extra_types.html"}],["meta",{"property":"og:site_name","content":"PSQLPy"}],["meta",{"property":"og:title","content":"Extra Types"}],["meta",{"property":"og:description","content":"PSQLPy has additional types due to the inability to accurately recognize the type passed from Python. All extra types available from Python with mapping to PostgreSQL type and R..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-08-13T20:03:28.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-13T20:03:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Extra Types\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-13T20:03:28.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"BigInt & Integer & SmallInt & Float32 & Float64","slug":"bigint-integer-smallint-float32-float64","link":"#bigint-integer-smallint-float32-float64","children":[]},{"level":2,"title":"PyVarChar & PyText","slug":"pyvarchar-pytext","link":"#pyvarchar-pytext","children":[]},{"level":2,"title":"PyJSON & PyJSONB","slug":"pyjson-pyjsonb","link":"#pyjson-pyjsonb","children":[]},{"level":2,"title":"PyMacAddr6 & PyMacAddr8","slug":"pymacaddr6-pymacaddr8","link":"#pymacaddr6-pymacaddr8","children":[]}],"git":{"createdTime":1723579408000,"updatedTime":1723579408000,"contributors":[{"name":"chandr-andr (Kiselev Aleksandr)","email":"chandr@chandr.net","commits":1}]},"filePathRelative":"usage/types/extra_types.md","localizedDate":"August 13, 2024","autoDesc":true,"excerpt":"<p>PSQLPy has additional types due to the inability to accurately recognize the type passed from Python.</p>\\n<p>All extra types available from Python with mapping to PostgreSQL type and Rust type.</p>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:center\\">PSQLPy type</th>\\n<th style=\\"text-align:center\\">PostgreSQL type</th>\\n<th style=\\"text-align:center\\">Rust Type</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:center\\">BigInt</td>\\n<td style=\\"text-align:center\\">BigInt</td>\\n<td style=\\"text-align:center\\">i64</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Integer</td>\\n<td style=\\"text-align:center\\">Integer</td>\\n<td style=\\"text-align:center\\">i32</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">SmallInt</td>\\n<td style=\\"text-align:center\\">SmallInt</td>\\n<td style=\\"text-align:center\\">i16</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Float32</td>\\n<td style=\\"text-align:center\\">FLOAT4</td>\\n<td style=\\"text-align:center\\">f32</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Float64</td>\\n<td style=\\"text-align:center\\">FLOAT8</td>\\n<td style=\\"text-align:center\\">f64</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">PyVarChar</td>\\n<td style=\\"text-align:center\\">VarChar</td>\\n<td style=\\"text-align:center\\">String</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">PyText</td>\\n<td style=\\"text-align:center\\">Text</td>\\n<td style=\\"text-align:center\\">String</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">PyJSON</td>\\n<td style=\\"text-align:center\\">JSON</td>\\n<td style=\\"text-align:center\\">serde::Value</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">PyJSONB</td>\\n<td style=\\"text-align:center\\">JSONB</td>\\n<td style=\\"text-align:center\\">serde::Value</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">PyMacAddr6</td>\\n<td style=\\"text-align:center\\">MacAddr</td>\\n<td style=\\"text-align:center\\">MacAddr6</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">PyMacAddr8</td>\\n<td style=\\"text-align:center\\">MacAddr8</td>\\n<td style=\\"text-align:center\\">MacAddr8</td>\\n</tr>\\n</tbody>\\n</table>"}');export{u as comp,y as data};
