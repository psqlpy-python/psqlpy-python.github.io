const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":200,\"nextId\":200,\"documentIds\":{\"0\":\"0\",\"1\":\"0#what-is-psqlpy\",\"2\":\"0#how-to-install\",\"3\":\"0#join-community\",\"4\":\"1\",\"5\":\"1#setting-up-environment\",\"6\":\"1#linting-and-type-checking\",\"7\":\"1#testing\",\"8\":\"2\",\"9\":\"2#components\",\"10\":\"3\",\"11\":\"3#usage\",\"12\":\"3#connection-methods\",\"13\":\"3#execute\",\"14\":\"3#parameters\",\"15\":\"3#fetch\",\"16\":\"3#parameters-1\",\"17\":\"3#execute-many\",\"18\":\"3#parameters-2\",\"19\":\"3#fetch-row\",\"20\":\"3#parameters-3\",\"21\":\"3#fetch-val\",\"22\":\"3#parameters-4\",\"23\":\"3#transaction\",\"24\":\"3#parameters-5\",\"25\":\"3#back-to-pool\",\"26\":\"4\",\"27\":\"4#connection-pool-methods\",\"28\":\"4#all-available-connectionpool-parameters\",\"29\":\"4#initialize-connection-pool-with-separate-parameters\",\"30\":\"4#initialize-connection-pool-with-dsn\",\"31\":\"4#create-connection-pool-with-one-function\",\"32\":\"4#resize\",\"33\":\"4#parameters\",\"34\":\"4#status\",\"35\":\"4#execute\",\"36\":\"4#parameters-1\",\"37\":\"4#fetch\",\"38\":\"4#parameters-2\",\"39\":\"4#acquire\",\"40\":\"4#connection\",\"41\":\"4#close\",\"42\":\"5\",\"43\":\"5#connectionpoolbuilder-methods\",\"44\":\"5#build\",\"45\":\"5#max-pool-size\",\"46\":\"5#conn-recycling-method\",\"47\":\"5#user\",\"48\":\"5#password\",\"49\":\"5#dbname\",\"50\":\"5#options\",\"51\":\"5#application-name\",\"52\":\"5#ssl-mode\",\"53\":\"5#ca-file\",\"54\":\"5#host\",\"55\":\"5#hostaddr\",\"56\":\"5#port\",\"57\":\"5#connect-timeout\",\"58\":\"5#tcp-user-timeout\",\"59\":\"5#target-session-attrs\",\"60\":\"5#load-balance-hosts\",\"61\":\"5#keepalives\",\"62\":\"5#keepalives-idle\",\"63\":\"5#keepalives-interval\",\"64\":\"5#keepalives-retries\",\"65\":\"6\",\"66\":\"6#cursor-parameters\",\"67\":\"6#cursor-as-async-iterator\",\"68\":\"6#cursor-methods\",\"69\":\"6#start\",\"70\":\"6#close\",\"71\":\"6#fetch\",\"72\":\"6#fetch-next\",\"73\":\"6#fetch-prior\",\"74\":\"6#fetch-first\",\"75\":\"6#fetch-last\",\"76\":\"6#fetch-absolute\",\"77\":\"6#fetch-relative\",\"78\":\"6#fetch-forward-all\",\"79\":\"6#fetch-backward\",\"80\":\"6#fetch-backward-all\",\"81\":\"7\",\"82\":\"7#exceptions-dependency\",\"83\":\"7#exceptions\",\"84\":\"7#rustpsqldriverpybaseerror\",\"85\":\"7#rusttopyvaluemappingerror\",\"86\":\"7#pytorustvaluemappingerror\",\"87\":\"7#uuidvalueconverterror\",\"88\":\"7#macaddrconversionerror\",\"89\":\"7#baseconnectionpoolerror\",\"90\":\"7#connectionpoolbuilderror\",\"91\":\"7#connectionpoolconfigurationerror\",\"92\":\"7#connectionpoolexecuteerror\",\"93\":\"7#baseconnectionerror\",\"94\":\"7#connectionexecuteerror\",\"95\":\"7#connectionclosederror\",\"96\":\"7#basetransactionerror\",\"97\":\"7#transactionbeginerror\",\"98\":\"7#transactioncommiterror\",\"99\":\"7#transactionrollbackerror\",\"100\":\"7#transactionsavepointerror\",\"101\":\"7#transactionexecuteerror\",\"102\":\"7#transactionclosederror\",\"103\":\"7#basecursorerror\",\"104\":\"7#cursorstarterror\",\"105\":\"7#cursorcloseerror\",\"106\":\"7#cursorfetcherror\",\"107\":\"7#cursorclosederror\",\"108\":\"8\",\"109\":\"8#queryresult-methods\",\"110\":\"8#result\",\"111\":\"8#parameters\",\"112\":\"8#as-class\",\"113\":\"8#parameters-1\",\"114\":\"8#row-factory\",\"115\":\"8#parameters-2\",\"116\":\"8#singlequeryresult-methods\",\"117\":\"8#result-1\",\"118\":\"8#parameters-3\",\"119\":\"8#as-class-1\",\"120\":\"8#parameters-4\",\"121\":\"8#row-factory-1\",\"122\":\"8#parameters-5\",\"123\":\"9\",\"124\":\"9#transaction-parameters\",\"125\":\"9#control-transaction-fully-on-your-own\",\"126\":\"9#control-transaction-with-async-context-manager\",\"127\":\"9#transaction-methods\",\"128\":\"9#begin\",\"129\":\"9#commit\",\"130\":\"9#execute\",\"131\":\"9#parameters\",\"132\":\"9#fetch\",\"133\":\"9#parameters-1\",\"134\":\"9#execute-many\",\"135\":\"9#parameters-2\",\"136\":\"9#fetch-row\",\"137\":\"9#parameters-3\",\"138\":\"9#fetch-val\",\"139\":\"9#parameters-4\",\"140\":\"9#pipeline\",\"141\":\"9#parameters-5\",\"142\":\"9#create-savepoint\",\"143\":\"9#parameters-6\",\"144\":\"9#rollback\",\"145\":\"9#rollback-savepoint\",\"146\":\"9#parameters-7\",\"147\":\"9#release-savepoint\",\"148\":\"9#parameters-8\",\"149\":\"9#cursor\",\"150\":\"9#parameters-9\",\"151\":\"10\",\"152\":\"10#components\",\"153\":\"10#connection-pool\",\"154\":\"11\",\"155\":\"11#important-notes\",\"156\":\"11#join-community\",\"157\":\"12\",\"158\":\"12#installation\",\"159\":\"12#first-request-to-the-database\",\"160\":\"13\",\"161\":\"14\",\"162\":\"14#complete-example\",\"163\":\"15\",\"164\":\"15#complete-example\",\"165\":\"16\",\"166\":\"16#standard-example\",\"167\":\"16#advanced-example\",\"168\":\"17\",\"169\":\"18\",\"170\":\"18#complete-example\",\"171\":\"19\",\"172\":\"19#complete-example\",\"173\":\"20\",\"174\":\"20#tuple-row\",\"175\":\"20#class-row\",\"176\":\"21\",\"177\":\"21#example\",\"178\":\"22\",\"179\":\"22#pass-unsupported-type-into-postgresql\",\"180\":\"22#decode-unsupported-type-from-postgresql\",\"181\":\"23\",\"182\":\"23#bigint-integer-smallint-float32-float64\",\"183\":\"23#pyvarchar-pytext\",\"184\":\"23#pyjson-pyjsonb\",\"185\":\"23#pymacaddr6-pymacaddr8\",\"186\":\"24\",\"187\":\"24#simple-type\",\"188\":\"24#array-type\",\"189\":\"24#example\",\"190\":\"24#composite-type\",\"191\":\"24#enum-type\",\"192\":\"25\",\"193\":\"26\",\"194\":\"27\",\"195\":\"28\",\"196\":\"29\",\"197\":\"30\",\"198\":\"31\",\"199\":\"32\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2],\"1\":[3,61],\"2\":[3],\"3\":[3,16],\"4\":[2,79],\"5\":[3,63],\"6\":[4,30],\"7\":[1,63],\"8\":[1],\"9\":[1,49],\"10\":[1,21],\"11\":[1],\"12\":[2],\"13\":[1],\"14\":[2,68],\"15\":[1],\"16\":[2,56],\"17\":[2],\"18\":[2,76],\"19\":[2],\"20\":[2,63],\"21\":[2],\"22\":[1,61],\"23\":[1,13],\"24\":[2,36],\"25\":[3,47],\"26\":[2,61],\"27\":[3],\"28\":[4,196],\"29\":[6,42],\"30\":[5,27],\"31\":[6,23],\"32\":[1,21],\"33\":[2,15],\"34\":[1,23],\"35\":[1],\"36\":[2,88],\"37\":[1],\"38\":[2,55],\"39\":[1,22],\"40\":[1,30],\"41\":[1,16],\"42\":[3,51],\"43\":[2],\"44\":[1,6],\"45\":[3,6],\"46\":[3,10],\"47\":[1,5],\"48\":[1,5],\"49\":[1,7],\"50\":[1,10],\"51\":[2,9],\"52\":[2,5],\"53\":[2,6],\"54\":[1,46],\"55\":[1,34],\"56\":[1,39],\"57\":[2,30],\"58\":[3,38],\"59\":[3,27],\"60\":[3,10],\"61\":[1,18],\"62\":[2,30],\"63\":[2,30],\"64\":[2,29],\"65\":[1,16],\"66\":[2,28],\"67\":[4,57],\"68\":[2,11],\"69\":[1,11],\"70\":[1,11],\"71\":[1,35],\"72\":[2,18],\"73\":[2,16],\"74\":[2,16],\"75\":[2,16],\"76\":[2,24],\"77\":[2,25],\"78\":[3,18],\"79\":[2,24],\"80\":[3,18],\"81\":[1,30],\"82\":[3],\"83\":[2],\"84\":[1,7],\"85\":[1,24],\"86\":[1,33],\"87\":[1,13],\"88\":[1,11],\"89\":[1,8],\"90\":[1,8],\"91\":[1,6],\"92\":[1,6],\"93\":[1,6],\"94\":[1,5],\"95\":[1,7],\"96\":[1,7],\"97\":[1,5],\"98\":[1,5],\"99\":[1,5],\"100\":[1,5],\"101\":[1,5],\"102\":[1,7],\"103\":[1,6],\"104\":[1,5],\"105\":[1,5],\"106\":[1,6],\"107\":[1,7],\"108\":[1,25],\"109\":[2],\"110\":[1],\"111\":[1,38],\"112\":[2],\"113\":[1,55],\"114\":[2],\"115\":[1,11],\"116\":[2],\"117\":[1],\"118\":[1,40],\"119\":[2],\"120\":[1,57],\"121\":[2],\"122\":[1,11],\"123\":[1,20],\"124\":[2,16],\"125\":[7,98],\"126\":[7,85],\"127\":[2],\"128\":[1,14],\"129\":[1,13],\"130\":[1],\"131\":[2,70],\"132\":[1],\"133\":[2,60],\"134\":[2],\"135\":[2,53],\"136\":[2],\"137\":[1,65],\"138\":[2],\"139\":[1,64],\"140\":[1],\"141\":[1,125],\"142\":[2],\"143\":[2,21],\"144\":[1,15],\"145\":[2],\"146\":[2,24],\"147\":[2],\"148\":[2,23],\"149\":[1],\"150\":[1,69],\"151\":[2],\"152\":[1,37],\"153\":[2,27],\"154\":[4,105],\"155\":[2,51],\"156\":[3,14],\"157\":[3],\"158\":[1,21],\"159\":[5,103],\"160\":[1,4],\"161\":[1,21],\"162\":[2,63],\"163\":[1,21],\"164\":[2,71],\"165\":[1,9],\"166\":[3,113],\"167\":[2,116],\"168\":[2,4],\"169\":[1,21],\"170\":[2,73],\"171\":[1,21],\"172\":[2,58],\"173\":[3,9],\"174\":[2,38],\"175\":[2,41],\"176\":[3,45],\"177\":[2,56],\"178\":[3,44],\"179\":[5,86],\"180\":[5,113],\"181\":[2,51],\"182\":[5,128],\"183\":[2,84],\"184\":[2,104],\"185\":[2,66],\"186\":[2],\"187\":[2,80],\"188\":[2,11],\"189\":[2,9],\"190\":[2,78],\"191\":[2,81],\"192\":[2,4],\"193\":[1,3],\"194\":[1],\"195\":[1],\"196\":[1],\"197\":[1],\"198\":[2],\"199\":[1]},\"averageFieldLength\":[1.865,35.554314171615225],\"storedFields\":{\"0\":{\"h\":\"PSQLPy documentation\"},\"1\":{\"h\":\"What is PSQLPy\",\"t\":[\"PSQLPy is a new Python driver for PostgreSQL fully written in Rust. It was inspired by Psycopg3 and AsyncPG. This project has two main goals: Make a interaction with the database as fast as possible and now PSQLPy shows itself to be times faster than the above drivers. Don't make useless abstractions and make it like a mirror to PostgreSQL.\",\"It has all necessary components to create high-load and fault tolerance applications.\"]},\"2\":{\"h\":\"How to install\"},\"3\":{\"h\":\"Join community!\",\"t\":[\"You can get support from the creators and users of PSQLPy in some social media:\",\"Telegram\"]},\"4\":{\"h\":\"Contribution guide\",\"t\":[\"We love contributions. This guide is for all fellas who want to make psqlpy better together.\",\"There are several rules for contributors:\",\"Please do not add malware.\",\"Please make sure that your request solves the problem.\",\"If you struggle with something or feel frustrated, you either create an issue, create a discussions. page or publish a draft PR and ask your question in the description.\",\"We have lots of tests in CI. But since CI runs from first-time contributors should be approved, you better test locally. It just takes less time to prepare PR for merging.\"]},\"5\":{\"h\":\"Setting up environment\",\"t\":[\"Since it's rust-first project you need to install rust on your computer. The best way to do it is check official site.\",\"After you install rust, you must prepare you python environment. One of the best ways is follow maturin offical documentation but below you can find all necessary commands.\",\"> python3 -m venv .venv > source .venv/bin/activate > pip install -U pip maturin \",\"Then you need to build PSQLPy project.\",\"maturin develop \",\"After this step project is built and installed in your python environment you created in previous step.\"]},\"6\":{\"h\":\"Linting and type checking\",\"t\":[\"We have pre-commit configured with all our settings. We highly recommend you to install it as a git hook using pre-commit install command.\",\"But even without installation, you can run all lints manually:\",\"pre-commit run -a \"]},\"7\":{\"h\":\"Testing\",\"t\":[\"You need to have PostgreSQL server somewhere to run pytest.\",\"Default credentials for testing PostgreSQL and you can configure it with env:\",\"host: localhost (env: POSTGRES_HOST)\",\"user: postgres (env: POSTGRES_USER)\",\"password: postgres (env: POSTGRES_PASSWORD)\",\"port: 5432 (env: POSTGRES_PORT)\",\"dbname: psqlpy_test (env: POSTGRES_DBNAME)\",\"We have tests with required SSL mode, so, if you don't want to run PostgreSQL in SSL mode, you could run\",\"pytest --ignore=\\\"./python/tests/test_ssl_mode.py\\\" \",\"If you have PostgreSQL with enabled ssl mode, you need to set path to your ca_file in POSTGRES_CERT_FILE env. And run\",\"pytest \"]},\"8\":{\"h\":\"Components\"},\"9\":{\"h\":\"Components\",\"t\":[\"ConnectionPool: holds connections in itself and give them when requested.\",\"ConnectionPoolBuilder: Chainable builder for ConnectionPool, for people who prefer it over big initialization.\",\"Connection: represents single database connection, can be retrieved from ConnectionPool.\",\"Transaction: represents database transaction, can be made from Connection.\",\"Cursor: represents database cursor, can be made from Transaction.\",\"QueryResult: represents list of results from database.\",\"SingleQueryResult: represents single result from the database.\",\"Exceptions: we have some custom exceptions.\"]},\"10\":{\"h\":\"Connection\",\"t\":[\"Connection object represents single connection to the PostgreSQL. You must work with database within it. Connection get be made with ConnectionPool().connection() method.\"]},\"11\":{\"h\":\"Usage\"},\"12\":{\"h\":\"Connection methods\"},\"13\":{\"h\":\"Execute\"},\"14\":{\"h\":\"Parameters:\",\"t\":[\"querystring: Statement string.\",\"parameters: List of parameters for the statement string.\",\"prepared: Prepare statement before execution or not.\",\"You can execute any query directly from Connection object. This method supports parameters, each parameter must be marked as $<number> in querystring (number starts with 1).\",\"async def main() -> None: ... connection = await db_pool.connection() results: QueryResult = await connection.execute( \\\"SELECT * FROM users WHERE id = $1 and username = $2\\\", [100, \\\"Alex\\\"], ) dict_results: list[dict[str, Any]] = results.result() \"]},\"15\":{\"h\":\"Fetch\"},\"16\":{\"h\":\"Parameters:\",\"t\":[\"querystring: Statement string.\",\"parameters: List of parameters for the statement string.\",\"prepared: Prepare statement before execution or not.\",\"The same as the execute method, for some people this naming is preferable.\",\"async def main() -> None: ... connection = await db_pool.connection() results: QueryResult = await connection.fetch( \\\"SELECT * FROM users WHERE id = $1 and username = $2\\\", [100, \\\"Alex\\\"], ) dict_results: list[dict[str, Any]] = results.result() \"]},\"17\":{\"h\":\"Execute Many\"},\"18\":{\"h\":\"Parameters:\",\"t\":[\"querystring: Statement string.\",\"parameters: List of list of parameters for the statement string.\",\"prepared: Prepare statement before execution or not.\",\"This method supports parameters, each parameter must be marked as $<number> in querystring (number starts with 1). Atomicity is provided, so you don't need to worry about unsuccessful result, because there is a transaction used internally. This method returns nothing.\",\"async def main() -> None: ... connection = await db_pool.connection() await connection.execute_many( \\\"INSERT INTO users (name, age) VALUES ($1, $2)\\\", [[\\\"boba\\\", 10], [\\\"boba\\\", 20]], ) \"]},\"19\":{\"h\":\"Fetch Row\"},\"20\":{\"h\":\"Parameters:\",\"t\":[\"querystring: Statement string.\",\"parameters: List of list of parameters for the statement string.\",\"prepared: Prepare statements before execution or not.\",\"Sometimes you need to fetch only first row from the result.\",\"Warning\",\"Querystring must return exactly one result or an exception will be raised.\",\"async def main() -> None: ... connection = await db_pool.connection() query_result: SingleQueryResult = await transaction.fetch_row( \\\"SELECT username FROM users WHERE id = $1\\\", [100], ) dict_result: Dict[Any, Any] = query_result.result() \"]},\"21\":{\"h\":\"Fetch Val\"},\"22\":{\"h\":\"Parameters\",\"t\":[\"querystring: Statement string.\",\"parameters: List of list of parameters for the statement string.\",\"prepared: Prepare statements before execution or not.\",\"If you need to retrieve some value not QueryResult.\",\"Warning\",\"Querystring must return exactly one result or an exception will be raised.\",\"async def main() -> None: ... connection = await db_pool.connection() # this will be an int value query_result_value = await connection.fetch_row( \\\"SELECT COUNT(*) FROM users WHERE id > $1\\\", [100], ) \"]},\"23\":{\"h\":\"Transaction\",\"t\":[\"Connection is the only object that can be used to build Transaction object.\"]},\"24\":{\"h\":\"Parameters:\",\"t\":[\"isolation_level: level of isolation. Default how it is in PostgreSQL.\",\"read_variant: configure read variant of the transaction. Default how it is in PostgreSQL.\",\"deferrable: configure deferrable of the transaction. Default how it is in PostgreSQL.\",\"from psqlpy import IsolationLevel, ReadVariant async def main() -> None: ... connection = await db_pool.connection() transaction = connection.transaction( isolation_level=IsolationLevel.Serializable, read_variant=ReadVariant.ReadWrite, deferrable=True, ) \"]},\"25\":{\"h\":\"Back To Pool\",\"t\":[\"Returns connection to the pool. It's crucial to commit all transactions and close all cursor which are made from the connection. Otherwise, this method won't do anything useful.\",\"Tips\",\"There is no need in this method if you use async context manager.\",\"async def main() -> None: ... connection = await db_pool.connection() connection.back_to_pool() \"]},\"26\":{\"h\":\"Connection Pool\",\"t\":[\"Connection pool is the main object in the library. It initializes, creates, holds and gives connection to the user side. Connection pool must be started up before any other operations.\",\"Important\",\"You cannot set the minimum size for the connection pool, by it is 0.\",\"ConnectionPool doesn't create connection on startup. It makes new connection on demand.\",\"So, if you set max_db_pool_size to 100, pool will create new connection every time there aren't enough connections to handle the load.\"]},\"27\":{\"h\":\"Connection pool methods\"},\"28\":{\"h\":\"All available ConnectionPool parameters\",\"t\":[\"dsn: Full dsn connection string. postgres://postgres:postgres@localhost:5432/postgres?target_session_attrs=read-write\",\"username: Username of the user in the PostgreSQL\",\"password: Password of the user in the PostgreSQL\",\"host: Host of the PostgreSQL\",\"hosts: Hosts of the PostgreSQL\",\"port: Port of the PostgreSQL\",\"ports: Ports of the PostgreSQL\",\"db_name: Name of the database in PostgreSQL\",\"target_session_attrs: Specifies requirements of the session.\",\"options: Command line options used to configure the server\",\"application_name: Sets the application_name parameter on the server.\",\"connect_timeout_sec: The time limit in seconds applied to each socket-level connection attempt. Note that hostnames can resolve to multiple IP addresses, and this limit is applied to each address. Defaults to no timeout.\",\"connect_timeout_nanosec: nanosec for connection timeout, can be used only with connect_timeout_sec.\",\"tcp_user_timeout_sec: The time limit that transmitted data may remain unacknowledged before a connection is forcibly closed. This is ignored for Unix domain socket connections. It is only supported on systems where TCP_USER_TIMEOUT is available and will default to the system default if omitted or set to 0; on other systems, it has no effect.\",\"tcp_user_timeout_nanosec: nanosec for cp_user_timeout, can be used only with tcp_user_timeout_sec.\",\"keepalives: Controls the use of TCP keepalive. This option is ignored when connecting with Unix sockets. Defaults to on.\",\"keepalives_idle_sec: The number of seconds of inactivity after which a keepalive message is sent to the server. This option is ignored when connecting with Unix sockets. Defaults to 2 hours.\",\"keepalives_idle_nanosec: Nanosec for keepalives_idle_sec.\",\"keepalives_interval_sec: The time interval between TCP keepalive probes. This option is ignored when connecting with Unix sockets.\",\"keepalives_interval_nanosec: Nanosec for keepalives_interval_sec.\",\"keepalives_retries: The maximum number of TCP keepalive probes that will be sent before dropping a connection. This option is ignored when connecting with Unix sockets.\",\"load_balance_hosts: Controls the order in which the client tries to connect to the available hosts and addresses. Once a connection attempt is successful no other hosts and addresses will be tried. This parameter is typically used in combination with multiple host names or a DNS record that returns multiple IPs. If set to disable, hosts and addresses will be tried in the order provided. If set to random, hosts will be tried in a random order, and the IP addresses resolved from a hostname will also be tried in a random order. Defaults to disable.\",\"max_db_pool_size: maximum size of the connection pool.\",\"conn_recycling_method: how a connection is recycled.\",\"ssl_mode: ssl mode.\",\"ca_file: path to ca_file for ssl.\",\"Example of possible dsns:\",\"postgresql://user@localhost postgresql://user:password@%2Fvar%2Flib%2Fpostgresql/mydb?connect_timeout=10 postgresql://user@host1:1234,host2,host3:5678?target_session_attrs=read-write postgresql:///mydb?user=user&host=/var/lib/postgresql \",\"Important\",\"If dsn is specified then username, password, host, hosts, port, ports, db_name and target_session_attrs parameters will be ignored.\"]},\"29\":{\"h\":\"Initialize Connection Pool with separate parameters\",\"t\":[\"There are two ways of how to connect to the database. First one is use connection parameters separately:\",\"import asyncio from typing import Final from psqlpy import ConnectionPool db_pool: Final = ConnectionPool( username=\\\"postgres\\\", password=\\\"postgres\\\", host=\\\"localhost\\\", port=5432, db_name=\\\"postgres\\\", max_db_pool_size=10, ) async def main() -> None: \"]},\"30\":{\"h\":\"Initialize Connection Pool with DSN\",\"t\":[\"Other way is use DSN:\",\"import asyncio from typing import Final from psqlpy import ConnectionPool db_pool: Final = ConnectionPool( dsn=\\\"postgres://postgres:postgres@localhost:5432/postgres\\\", max_db_pool_size=10, ) async def main() -> None: \"]},\"31\":{\"h\":\"Create Connection Pool with one function\",\"t\":[\"from typing import Final from psqlpy import connect db_pool: Final = connect( dsn=\\\"postgres://postgres:postgres@localhost:5432/postgres\\\", max_db_pool_size=10, ) \",\"connect function has the same parameters as ConnectionPool.\"]},\"32\":{\"h\":\"Resize\",\"t\":[\"Resize connection pool capacity.\",\"This change the max_size of the pool dropping excess objects and/or making space for new ones.\"]},\"33\":{\"h\":\"Parameters:\",\"t\":[\"new_max_size: new size of the pool.\",\"async def main() -> None: ... db_pool.resize(15) \"]},\"34\":{\"h\":\"Status\",\"t\":[\"Retrieve status of the connection pool.\",\"It has 4 parameters:\",\"max_size - maximum possible size of the connection pool.\",\"size - current size of the connection pool.\",\"available - available connection in the connection pool.\",\"waiting - waiting requests to retrieve connection from connection pool.\"]},\"35\":{\"h\":\"Execute\"},\"36\":{\"h\":\"Parameters:\",\"t\":[\"querystring: Statement string.\",\"parameters: List of parameters for the statement string.\",\"prepared: Prepare statement before execution or not.\",\"You can execute any query directly from Connection Pool. This method supports parameters, each parameter must be marked as $<number> (number starts with 1). Parameters must be passed as list after querystring.\",\"Caution\",\"You must use ConnectionPool.execute method in high-load production code wisely! It pulls connection from the pool each time you execute query. Preferable way to execute statements with Connection or Transaction\",\"async def main() -> None: ... results: QueryResult = await db_pool.execute( \\\"SELECT * FROM users WHERE id = $1 and username = $2\\\", [100, \\\"Alex\\\"], ) dict_results: list[dict[str, Any]] = results.result() \"]},\"37\":{\"h\":\"Fetch\"},\"38\":{\"h\":\"Parameters:\",\"t\":[\"querystring: Statement string.\",\"parameters: List of parameters for the statement string.\",\"prepared: Prepare statement before execution or not.\",\"The same as the execute method, for some people this naming is preferable.\",\"async def main() -> None: ... results: QueryResult = await db_pool.fetch( \\\"SELECT * FROM users WHERE id = $1 and username = $2\\\", [100, \\\"Alex\\\"], ) dict_results: list[dict[str, Any]] = results.result() \"]},\"39\":{\"h\":\"Acquire\",\"t\":[\"Get single connection for async context manager. Must be used only in async context manager.\",\"async def main() -> None: ... async with db_pool.acquire() as connection: ... \"]},\"40\":{\"h\":\"Connection\",\"t\":[\"To get single connection from the ConnectionPool there is method named connection().\",\"async def main() -> None: ... connection = await db_pool.connection() \",\"Cool tip\",\"This is the preferable way to work with the PostgreSQL.\"]},\"41\":{\"h\":\"Close\",\"t\":[\"To close the connection pool at the stop of your application.\",\"def main() -> None: ... db_pool.close() \"]},\"42\":{\"h\":\"Connection Pool Builder\",\"t\":[\"Component allows you to create ConnectionPool with chainable methods. It doesn't have any difference from classic python-way initialization.\",\"Every method has robust docstring but you can check all available methods here.\",\"from psqlpy import ConnectionPoolBuilder database_pool = ( ConnectionPoolBuilder() .max_pool_size(10) .user(\\\"psqlpy\\\") .password(\\\"psqlpy\\\") .dbname(\\\"psqlpy\\\") .host(\\\"192.0.0.1\\\") .port(5432) .build() ) \"]},\"43\":{\"h\":\"ConnectionPoolBuilder methods\"},\"44\":{\"h\":\"build\",\"t\":[\"Create new ConnectionPool from ConnectionPoolBuilder.\"]},\"45\":{\"h\":\"max_pool_size\",\"t\":[\"Set maximum connection pool size.\"]},\"46\":{\"h\":\"conn_recycling_method\",\"t\":[\"Set connection recycling method.\",\"Connection recycling method is how a connection is recycled.\"]},\"47\":{\"h\":\"user\",\"t\":[\"Set username to PostgreSQL.\"]},\"48\":{\"h\":\"password\",\"t\":[\"Set password for PostgreSQL.\"]},\"49\":{\"h\":\"dbname\",\"t\":[\"Set database name for the PostgreSQL.\"]},\"50\":{\"h\":\"options\",\"t\":[\"Set command line options used to configure the server.\"]},\"51\":{\"h\":\"application_name\",\"t\":[\"Set the value of the application_name runtime parameter.\"]},\"52\":{\"h\":\"ssl_mode\",\"t\":[\"Set the SSL configuration.\"]},\"53\":{\"h\":\"ca_file\",\"t\":[\"Set ca_file for SSL.\"]},\"54\":{\"h\":\"host\",\"t\":[\"Add a host to the configuration.\",\"Multiple hosts can be specified by calling this method multiple times, and each will be tried in order. On Unix systems, a host starting with a / is interpreted as a path to a directory containing Unix domain sockets. There must be either no hosts, or the same number of hosts as hostaddrs.\"]},\"55\":{\"h\":\"hostaddr\",\"t\":[\"Add a hostaddr to the configuration.\",\"Multiple hostaddrs can be specified by calling this method multiple times, and each will be tried in order. There must be either no hostaddrs, or the same number of hostaddrs as hosts.\"]},\"56\":{\"h\":\"port\",\"t\":[\"Add a port to the configuration.\",\"Multiple ports can be specified by calling this method multiple times. There must either be no ports, in which case the default of 5432 is used, a single port, in which it is used for all hosts, or the same number of ports as hosts.\"]},\"57\":{\"h\":\"connect_timeout\",\"t\":[\"Set the timeout applied to socket-level connection attempts.\",\"Note that hostnames can resolve to multiple IP addresses, and this timeout will apply to each address of each host separately. Defaults to no limit.\"]},\"58\":{\"h\":\"tcp_user_timeout\",\"t\":[\"Set the TCP user timeout.\",\"This is ignored for Unix domain socket connections. It is only supported on systems where TCP_USER_TIMEOUT is available and will default to the system default if omitted or set to 0; on other systems, it has no effect.\"]},\"59\":{\"h\":\"target_session_attrs\",\"t\":[\"Set the requirements of the session.\",\"This can be used to connect to the primary server in a clustered database rather than one of the read-only secondary servers. Defaults to Any.\"]},\"60\":{\"h\":\"load_balance_hosts\",\"t\":[\"Set the host load balancing behavior.\",\"Defaults to disable.\"]},\"61\":{\"h\":\"keepalives\",\"t\":[\"Control the use of TCP keepalive.\",\"This is ignored for Unix domain socket connections.\",\"Defaults to true.\"]},\"62\":{\"h\":\"keepalives_idle\",\"t\":[\"Set the amount of idle time before a keepalive packet is sent on the connection.\",\"This is ignored for Unix domain sockets, or if the keepalives option is disabled.\",\"Defaults to 2 hours.\"]},\"63\":{\"h\":\"keepalives_interval\",\"t\":[\"Sets the time interval between TCP keepalive probes.\",\"On Windows, this sets the value of the tcp_keepalive struct keepalive interval field.\",\"This is ignored for Unix domain sockets, or if the keepalives option is disabled.\"]},\"64\":{\"h\":\"keepalives_retries\",\"t\":[\"Sets the maximum number of TCP keepalive probes that will be sent before dropping a connection.\",\"This is ignored for Unix domain sockets, or if the keepalives option is disabled.\"]},\"65\":{\"h\":\"Cursor\",\"t\":[\"Cursor objects represents real Cursor in the PostgreSQL. PostgreSQL docs It can be built only from Transaction.\"]},\"66\":{\"h\":\"Cursor Parameters\",\"t\":[\"querystring: specify query for cursor.\",\"parameters: parameters for the querystring. Default None\",\"fetch_number: default fetch number. It is used in fetch() method and in async iterator. Default 10\",\"scroll: is cursor scrollable or not. Default as in PostgreSQL.\"]},\"67\":{\"h\":\"Cursor as async iterator\",\"t\":[\"The most common situation is using Cursor as async iterator.\",\"from psqlpy import ConnectionPool, QueryResult async def main() -> None: db_pool = ConnectionPool() connection = await db_pool.connection() transaction = await connection.transaction() # Here we fetch 5 results in each iteration. async with cursor in transaction.cursor( querystring=\\\"SELECT * FROM users WHERE username = $1\\\", parameters=[\\\"Some_Username\\\"], fetch_number=5, ): async for fetched_result in cursor: dict_result: List[Dict[Any, Any]] = fetched_result.result() ... # do something with this result. \"]},\"68\":{\"h\":\"Cursor methods\",\"t\":[\"There are a lot of methods to work with cursor.\"]},\"69\":{\"h\":\"Start\",\"t\":[\"Declare (create) cursor.\",\"async def main() -> None: await cursor.start() \"]},\"70\":{\"h\":\"Close\",\"t\":[\"Close the cursor\",\"async def main() -> None: await cursor.close() \"]},\"71\":{\"h\":\"Fetch\",\"t\":[\"You can fetch next N records from the cursor. It's possible to specify N fetch record with parameter fetch_number, otherwise will be used fetch_number from the Cursor initialization.\",\"async def main() -> None: result: QueryResult = await cursor.fetch( fetch_number=100, ) \"]},\"72\":{\"h\":\"Fetch Next\",\"t\":[\"Just fetch next record from the Cursor.\",\"async def main() -> None: result: QueryResult = await cursor.fetch_next() \"]},\"73\":{\"h\":\"Fetch Prior\",\"t\":[\"Just fetch previous record.\",\"async def main() -> None: result: QueryResult = await cursor.fetch_prior() \"]},\"74\":{\"h\":\"Fetch First\",\"t\":[\"Just fetch the first record.\",\"async def main() -> None: result: QueryResult = await cursor.fetch_first() \"]},\"75\":{\"h\":\"Fetch Last\",\"t\":[\"Just fetch the last record.\",\"async def main() -> None: result: QueryResult = await cursor.fetch_last() \"]},\"76\":{\"h\":\"Fetch Absolute\",\"t\":[\"Just fetch absolute records. It has absolute_number parameter, you must specify it.\",\"async def main() -> None: result: QueryResult = await cursor.fetch_absolute( absolute_number=10, ) \"]},\"77\":{\"h\":\"Fetch Relative\",\"t\":[\"Just fetch absolute records. It has relative_number parameter, you must specify it.\",\"async def main() -> None: result: QueryResult = await cursor.fetch_relative( relative_number=10, ) \"]},\"78\":{\"h\":\"Fetch Forward All\",\"t\":[\"Fetch forward all records in the cursor.\",\"async def main() -> None: result: QueryResult = await cursor.fetch_forward_all() \"]},\"79\":{\"h\":\"Fetch Backward\",\"t\":[\"Just backward records. It has backward_count parameter, you must specify it.\",\"async def main() -> None: result: QueryResult = await cursor.fetch_backward( backward_count=10, ) \"]},\"80\":{\"h\":\"Fetch Backward All\",\"t\":[\"Fetch backward all records in the cursor.\",\"async def main() -> None: result: QueryResult = await cursor.fetch_backward_all() \"]},\"81\":{\"h\":\"Exceptions\",\"t\":[\"We have a lot of exceptions for different situations. They are split into different subclasses for ConnectionPool, Connection, Transaction and Cursor.\",\"You can use them to define code behavior based on exceptions.\"]},\"82\":{\"h\":\"Exceptions dependency:\"},\"83\":{\"h\":\"Exceptions:\"},\"84\":{\"h\":\"RustPSQLDriverPyBaseError\",\"t\":[\"Main bas exception for all errors.\"]},\"85\":{\"h\":\"RustToPyValueMappingError\",\"t\":[\"Error if it is not possible to covert rust type to python.\",\"You can get it if you database contains data type that it not supported by this library.\"]},\"86\":{\"h\":\"PyToRustValueMappingError\",\"t\":[\"Error if it is not possible to covert python type to rust.\",\"You can get this exception when executing queries with parameters. So, if there are no parameters for the query, don't handle this error.\"]},\"87\":{\"h\":\"UUIDValueConvertError\",\"t\":[\"Error if it's impossible to convert py string UUID into rust UUID.\"]},\"88\":{\"h\":\"MacAddrConversionError\",\"t\":[\"Error if cannot convert MacAddr string value to rust type.\"]},\"89\":{\"h\":\"BaseConnectionPoolError\",\"t\":[\"Base error for all Connection Pool errors.\"]},\"90\":{\"h\":\"ConnectionPoolBuildError\",\"t\":[\"Error for errors in building connection pool.\"]},\"91\":{\"h\":\"ConnectionPoolConfigurationError\",\"t\":[\"Error in connection pool configuration.\"]},\"92\":{\"h\":\"ConnectionPoolExecuteError\",\"t\":[\"Error in connection pool execution.\"]},\"93\":{\"h\":\"BaseConnectionError\",\"t\":[\"Base error for Connection errors.\"]},\"94\":{\"h\":\"ConnectionExecuteError\",\"t\":[\"Error in connection execution.\"]},\"95\":{\"h\":\"ConnectionClosedError\",\"t\":[\"Error if underlying connection is closed.\"]},\"96\":{\"h\":\"BaseTransactionError\",\"t\":[\"Base error for all transaction errors.\"]},\"97\":{\"h\":\"TransactionBeginError\",\"t\":[\"Error in transaction begin.\"]},\"98\":{\"h\":\"TransactionCommitError\",\"t\":[\"Error in transaction commit.\"]},\"99\":{\"h\":\"TransactionRollbackError\",\"t\":[\"Error in transaction rollback.\"]},\"100\":{\"h\":\"TransactionSavepointError\",\"t\":[\"Error in transaction savepoint.\"]},\"101\":{\"h\":\"TransactionExecuteError\",\"t\":[\"Error in transaction execution.\"]},\"102\":{\"h\":\"TransactionClosedError\",\"t\":[\"Error if underlying connection is closed.\"]},\"103\":{\"h\":\"BaseCursorError\",\"t\":[\"Base error for Cursor errors.\"]},\"104\":{\"h\":\"CursorStartError\",\"t\":[\"Error in cursor declare.\"]},\"105\":{\"h\":\"CursorCloseError\",\"t\":[\"Error in cursor close.\"]},\"106\":{\"h\":\"CursorFetchError\",\"t\":[\"Error in cursor fetch (any fetch).\"]},\"107\":{\"h\":\"CursorClosedError\",\"t\":[\"Error if underlying connection is closed.\"]},\"108\":{\"h\":\"Results\",\"t\":[\"Results are objects that driver returns to python with some data inside.\",\"Currently there are two results:\",\"QueryResult - for result with multiple rows\",\"SingleQueryResult - for result with exactly one row\"]},\"109\":{\"h\":\"QueryResult methods\"},\"110\":{\"h\":\"Result\"},\"111\":{\"h\":\"Parameters\",\"t\":[\"custom_decoders: custom decoders for unsupported types. Read more\",\"Get the result as a list of dicts\",\"async def main() -> None: db_pool = ConnectionPool() connection = await db_pool.connection() query_result: QueryResult = await connection.execute( \\\"SELECT username FROM users\\\", [], ) result: List[Dict[str, Any]] = query_result.result() \"]},\"112\":{\"h\":\"As class\"},\"113\":{\"h\":\"Parameters\",\"t\":[\"as_class: Custom class from Python.\",\"custom_decoders: custom decoders for unsupported types. Read more\",\"Get the result as a list of passed class instances. Passed class can easily be either pydantic or msgspec model.\",\"class ExampleOfAsClass: def __init__(self, username: str) -> None: self.username = username async def main() -> None: db_pool = ConnectionPool() connection = await db_pool.connection() query_result: QueryResult = await connection.execute( \\\"SELECT username FROM users\\\", [], ) class_results: List[ExampleOfAsClass] = query_result.as_class( as_class=ExampleOfAsClass, ) \"]},\"114\":{\"h\":\"Row Factory\"},\"115\":{\"h\":\"Parameters\",\"t\":[\"row_factory: custom callable object.\",\"custom_decoders: custom decoders for unsupported types. Read more\",\"Read more\"]},\"116\":{\"h\":\"SingleQueryResult methods\"},\"117\":{\"h\":\"Result\"},\"118\":{\"h\":\"Parameters\",\"t\":[\"custom_decoders: custom decoders for unsupported types. Read more\",\"Get the result as a dict\",\"async def main() -> None: db_pool = ConnectionPool() connection = await db_pool.connection() query_result: SingleQueryResult = await db_pool.fetch_row( \\\"SELECT username FROM users WHERE id = $1\\\", [100], ) result: Dict[str, Any] = query_result.result() \"]},\"119\":{\"h\":\"As class\"},\"120\":{\"h\":\"Parameters\",\"t\":[\"as_class: Custom class from Python.\",\"custom_decoders: custom decoders for unsupported types. Read more\",\"Get the result as a passed class instance. Passed class can easily be either pydantic or msgspec model.\",\"class ExampleOfAsClass: def __init__(self, username: str) -> None: self.username = username async def main() -> None: db_pool = ConnectionPool() connection = await db_pool.connection() query_result: SingleQueryResult = await connection.fetch_row( \\\"SELECT username FROM users WHERE id = $1\\\", [100], ) class_results: ExampleOfAsClass = query_result.as_class( as_class=ExampleOfAsClass, ) \"]},\"121\":{\"h\":\"Row Factory\"},\"122\":{\"h\":\"Parameters\",\"t\":[\"row_factory: custom callable object.\",\"custom_decoders: custom decoders for unsupported types. Read more\",\"Read more\"]},\"123\":{\"h\":\"Transaction\",\"t\":[\"Transaction object represents PostgreSQL transaction. There are two ways of how we can work with transactions on PSQLPy side.\"]},\"124\":{\"h\":\"Transaction parameters\",\"t\":[\"isolation_level: level of isolation. Default how it is in PostgreSQL.\",\"read_variant: configure read variant of the transaction. Default how it is in PostgreSQL.\",\"deferrable: configure deferrable of the transaction. Default how it is in PostgreSQL.\"]},\"125\":{\"h\":\"Control transaction fully on your own.\",\"t\":[\"First of all, you can get transaction object only from connection object.\",\"from psqlpy import ConnectionPool db_pool: Final = ConnectionPool( dsn=\\\"postgres://postgres:postgres@localhost:5432/postgres\\\", ) async def main() -> None: connection = await db_pool.connection() transaction = connection.transaction() \",\"After this you need to start you transaction or in PostgreSQL terms you need to BEGIN it.\",\"async def main() -> None: ... connection = await db_pool.connection() transaction = connection.transaction() await transaction.begin() \",\"So, after these manipulations you are ready to make you first query with the transaction.\",\"async def main() -> None: ... await transaction.execute( \\\"INSERT INTO users (id, username) VALUES ($1, $2)\\\", [\\\"100\\\", \\\"Alex\\\"], ) \",\"Good! We've inserted our first row, but if we won't commit the transaction all changes will discard.\",\"Warning\",\"We need to commit changes.\",\"async def main() -> None: ... await transaction.commit() \",\"So, now everything is fine, changes are committed. But you can say that it's too complicated and you are right! We have an alternative way to handle begin() and commit() automatically.\"]},\"126\":{\"h\":\"Control transaction with async context manager.\",\"t\":[\"There is the previous example but it is rewritten with use of async context manager.\",\"from psqlpy import ConnectionPool db_pool: Final = ConnectionPool( dsn=\\\"postgres://postgres:postgres@localhost:5432/postgres\\\", ) async def main() -> None: await db_pool.startup() connection = await db_pool.connection() async with connection.transaction() as transaction: # begin() calls automatically await transaction.execute( \\\"INSERT INTO users (id, username) VALUES ($1, $2)\\\", [\\\"100\\\", \\\"Alex\\\"], ) # commit() calls automatically. \",\"Cool tip\",\"If a query raises an error in our async context manager, ROLLBACK is executed automatically.\",\"Important\",\"Transaction can be began only once, so if you have already called begin() manually then async context manager initialize will fail, you need to choose what to use.\"]},\"127\":{\"h\":\"Transaction methods\"},\"128\":{\"h\":\"Begin\",\"t\":[\"You can start a transaction manually.\",\"async def main() -> None: ... await transaction.begin() ... \"]},\"129\":{\"h\":\"Commit\",\"t\":[\"You can commit a transaction manually.\",\"async def main() -> None: ... await transaction.commit() ... \"]},\"130\":{\"h\":\"Execute\"},\"131\":{\"h\":\"Parameters:\",\"t\":[\"querystring: Statement string.\",\"parameters: List of parameters for the statement string.\",\"prepared: Prepare statement before execution or not.\",\"You can execute any query directly from Transaction object. This method supports parameters, each parameter must be marked as $<number> (number starts with 1).\",\"async def main() -> None: ... connection = await db_pool.connection() async with connection.transaction() as transaction: results: QueryResult = await transaction.execute( querystring=\\\"SELECT * FROM users WHERE id = $1 and username = $2\\\", parameters=[100, \\\"Alex\\\"], ) dict_results: list[dict[str, Any]] = results.result() \"]},\"132\":{\"h\":\"Fetch\"},\"133\":{\"h\":\"Parameters:\",\"t\":[\"querystring: Statement string.\",\"parameters: List of parameters for the statement string.\",\"prepared: Prepare statement before execution or not.\",\"The same as the execute method, for some people this naming is preferable.\",\"async def main() -> None: ... connection = await db_pool.connection() async with connection.transaction() as transaction: results: QueryResult = await transaction.fetch( querystring=\\\"SELECT * FROM users WHERE id = $1 and username = $2\\\", parameters=[100, \\\"Alex\\\"], ) dict_results: list[dict[str, Any]] = results.result() \"]},\"134\":{\"h\":\"Execute Many\"},\"135\":{\"h\":\"Parameters:\",\"t\":[\"querystring: Statement string.\",\"parameters: List of list of parameters for the statement string.\",\"prepared: Prepare statements before execution or not.\",\"If you want to execute the same querystring, but with different parameters, execute_many is for you!\",\"async def main() -> None: ... connection = await db_pool.connection() async with connection.transaction() as transaction: await transaction.execute_many( \\\"INSERT INTO users (name, age) VALUES ($1, $2)\\\", [[\\\"boba\\\", 10], [\\\"biba\\\", 20]], ) \"]},\"136\":{\"h\":\"Fetch Row\"},\"137\":{\"h\":\"Parameters\",\"t\":[\"querystring: Statement string.\",\"parameters: List of list of parameters for the statement string.\",\"prepared: Prepare statements before execution or not.\",\"Sometimes you need to fetch only first row from the result.\",\"Warning\",\"Querystring must return exactly one result or an exception will be raised.\",\"async def main() -> None: ... connection = await db_pool.connection() async with connection.transaction() as transaction: query_result: SingleQueryResult = await transaction.fetch_row( \\\"SELECT username FROM users WHERE id = $1\\\", [100], ) dict_result: Dict[Any, Any] = query_result.result() \"]},\"138\":{\"h\":\"Fetch Val\"},\"139\":{\"h\":\"Parameters\",\"t\":[\"querystring: Statement string.\",\"parameters: List of list of parameters for the statement string.\",\"prepared: Prepare statements before execution or not.\",\"If you need to retrieve some value not QueryResult.\",\"Warning\",\"Querystring must return exactly one result or an exception will be raised.\",\"async def main() -> None: ... connection = await db_pool.connection() async with connection.transaction() as transaction: # this will be an int value query_result_value = await transaction.fetch_row( \\\"SELECT COUNT(*) FROM users WHERE id > $1\\\", [100], ) \"]},\"140\":{\"h\":\"Pipeline\"},\"141\":{\"h\":\"Parameters\",\"t\":[\"queries: list of tuple. It must have structure like\",\"prepared: should the querystring/querystrings be prepared before the request. By default any querystrings will be prepared.\",\"queries = [ (\\\"SELECT * FROM users WHERE name = $1\\\", [\\\"some_name\\\"]), (\\\"SELECT 1\\\", None), ] \",\"prepared: Prepare statements before execution or not.\",\"Execute queries in pipeline. Pipelining can improve performance in use cases in which multiple, independent queries need to be executed. In a traditional workflow, each query is sent to the server after the previous query completes. In contrast, pipelining allows the client to send all of the queries to the server up front, minimizing time spent by one side waiting for the other to finish sending data:\",\" Sequential Pipelined | Client | Server | | Client | Server | |----------------|-----------------| |----------------|-----------------| | send query 1 | | | send query 1 | | | | process query 1 | | send query 2 | process query 1 | | receive rows 1 | | | send query 3 | process query 2 | | send query 2 | | | receive rows 1 | process query 3 | | | process query 2 | | receive rows 2 | | | receive rows 2 | | | receive rows 3 | | | send query 3 | | | | process query 3 | | receive rows 3 | | \",\"Read more!\",\"Full example:\",\"import asyncio from psqlpy import ConnectionPool, QueryResult async def main() -> None: db_pool = ConnectionPool() await db_pool.startup() connection = await db_pool.connection() transaction = connection.transaction() results: list[QueryResult] = await transaction.pipeline( queries=[ ( \\\"SELECT username FROM users WHERE id = $1\\\", [100], ), ( \\\"SELECT some_data FROM profiles\\\", None, ), ( \\\"INSERT INTO users (username, id) VALUES ($1, $2)\\\", [\\\"PSQLPy\\\", 1], ), ] ) \"]},\"142\":{\"h\":\"Create Savepoint\"},\"143\":{\"h\":\"Parameters:\",\"t\":[\"savepoint_name: name of the new savepoint.\",\"Savepoint creation. PostgreSQL docs\",\"async def main() -> None: ... await transaction.create_savepoint(\\\"my_savepoint\\\") await transaction.execute(...) await transaction.rollback_savepoint(\\\"my_savepoint\\\") \"]},\"144\":{\"h\":\"Rollback\",\"t\":[\"Rollback the whole transaction. PostgreSQL docs\",\"async def main() -> None: ... await transaction.execute(...) await transaction.rollback() \"]},\"145\":{\"h\":\"Rollback Savepoint\"},\"146\":{\"h\":\"Parameters:\",\"t\":[\"savepoint_name: name of the new savepoint.\",\"Rollback to the specified savepoint. PostgreSQL docs\",\"async def main() -> None: ... transaction = connection.transaction() await transaction.create_savepoint(\\\"my_savepoint\\\") await transaction.execute(...) await transaction.rollback_savepoint(\\\"my_savepoint\\\") \"]},\"147\":{\"h\":\"Release Savepoint\"},\"148\":{\"h\":\"Parameters:\",\"t\":[\"savepoint_name: name of the new savepoint.\",\"Release savepoint. PostgreSQL docs\",\"async def main() -> None: ... connection = await db_pool.connection() transaction = connection.transaction() await transaction.create_savepoint(\\\"my_savepoint\\\") await transaction.release_savepoint \"]},\"149\":{\"h\":\"Cursor\"},\"150\":{\"h\":\"Parameters\",\"t\":[\"querystring: Statement string.\",\"parameters: List of list of parameters for the statement string.\",\"fetch_number: rewrite default fetch_number. Default is 10.\",\"scroll: make cursor scrollable or not. Default is like in PostgreSQL.\",\"prepared: prepare querystring or not.\",\"From Transaction you can create new Cursor object which represents cursor in the PostgreSQL. PostgreSQL Docs\",\"async def main() -> None: ... transaction = await connection.transaction() cursor = transaction.cursor( querystring=\\\"SELECT * FROM users WHERE username = $1\\\", parameters=[\\\"Some_Username\\\"], fetch_number=5, ) await cursor.start() async for fetched_result in cursor: dict_result: List[Dict[Any, Any]] = fetched_result.result() ... # do something with the result. \"]},\"151\":{\"h\":\"Components Overview\"},\"152\":{\"h\":\"Components\",\"t\":[\"Connection pool: holds connections in itself and give them when requested.\",\"Connection: represents single database connection, can be retrieved from Connection pool.\",\"Transaction: represents database transaction, can be made from Connection.\",\"Cursor: represents database cursor, can be made from Transaction.\",\"Results: represents data returned from driver.\",\"Exceptions: we have some custom exceptions. (Section in development)\"]},\"153\":{\"h\":\"Connection pool\",\"t\":[\"Connection pool is the main object in the library. It initializes, creates, holds and gives connection to the user side.\\nConnection pool must be started up before any other operations.\"]},\"154\":{\"h\":\"What is PSQLPy?\",\"t\":[\"PSQLPy is a new Python driver for PostgreSQL fully written in Rust. It was inspired by Psycopg3 and AsyncPG.\",\"With PSQLPy you can:\",\"Make an interaction with the PostgeSQL in your application much faster (2-3 times).\",\"Be sure that there won't be any unexpected errors.\",\"Don't usually go to the documentation to search every question - we have awesome docstrings for every component.\",\"Use MyPy (or any other Python type checker) with confidence that exactly the types specified in the typing will be returned.\",\"Concentrate on writing your code, not understanding new abstractions in this library, we only have classes which represents PostgreSQL object (transaction, cursor, etc).\",\"Info\",\"It is extremely important to understand that the library will provide a noticeable acceleration in working with the database only if your queries are optimized. Otherwise, there will be acceleration, but not so significant\"]},\"155\":{\"h\":\"Important notes\",\"t\":[\"All statements will be prepared by default. You can read more about it here PostgreSQL Docs But in some situations this behavior can break you application. As an example, if you are using PGBouncer with Transaction Pooling ModeDocs or Statement Pooling ModeDocs you need to disable statement preparation. You can read how to do it in the next parts of the documentation.\"]},\"156\":{\"h\":\"Join community!\",\"t\":[\"You can get support from the creators of PSQLPy in some social media:\",\"Telegram\"]},\"157\":{\"h\":\"Let's Start\"},\"158\":{\"h\":\"Installation\",\"t\":[\"You can install psqlpy with pip, poetry or directly from git using pip:\",\"After installation you are ready to start querying!\"]},\"159\":{\"h\":\"First request to the database\",\"t\":[\"There is a minimal example of what you need to do to send your first query and receive result. Let's assume that we have table users:\",\"id\",\"name\",\"username\",\"1\",\"Aleksandr\",\"chandr-andr\",\"2\",\"Michail\",\"insani7y\",\"import asyncio from typing import Final from psqlpy import ConnectionPool, QueryResult async def main() -> None: # It uses default connection parameters db_pool: Final = ConnectionPool() results: Final[QueryResult] = await db_pool.execute( \\\"SELECT * FROM users WHERE id = $1\\\", [2], ) dict_results: Final[list[dict[Any, Any]]] = results.result() db.close() \",\"Tips\",\"You must call close() on database pool when you application is shutting down.\",\"Caution\",\"You must not use ConnectionPool.execute method in high-load production code!\\nIt pulls new connection from connection pull each call.\\nRecommended way to make queries is executing them with Connection, Transaction or Cursor.\"]},\"160\":{\"h\":\"Usage\",\"t\":[\"Feature details here.\"]},\"161\":{\"h\":\"AioHTTP\",\"t\":[\"There is the default example for AioHTTP framework.\",\"We strongly recommend to use the following example as a standard way to use PSQLPy with AioHTTP framework.\"]},\"162\":{\"h\":\"Complete example\",\"t\":[\"# Start example import asyncio from typing import cast from aiohttp import web from psqlpy import ConnectionPool async def start_db_pool(app: web.Application) -> None: \\\"\\\"\\\"Initialize database connection pool.\\\"\\\"\\\" db_pool = ConnectionPool( dsn=\\\"postgres://postgres:postgres@localhost:5432/postgres\\\", max_db_pool_size=10, ) app[\\\"db_pool\\\"] = db_pool async def stop_db_pool(app: web.Application) -> None: \\\"\\\"\\\"Close database connection pool.\\\"\\\"\\\" db_pool = cast(ConnectionPool, app.db_pool) db_pool.close() async def pg_pool_example(request: web.Request): db_pool = cast(ConnectionPool, request.app[\\\"db_pool\\\"]) connection = await db_pool.connection() await asyncio.sleep(10) query_result = await connection.execute( \\\"SELECT * FROM users\\\", ) dict_result = query_result.result() return web.json_response( data=dict_result, ) application = web.Application() application.on_startup.append(start_db_pool) application.add_routes([web.get('/', pg_pool_example)]) if __name__ == \\\"__main__\\\": web.run_app(application) \"]},\"163\":{\"h\":\"Blacksheep\",\"t\":[\"There is the default example for Blacksheep framework.\",\"We strongly recommend to use the following example as a standard way to use PSQLPy with Blacksheep framework.\"]},\"164\":{\"h\":\"Complete example\",\"t\":[\"# Start example from __future__ import annotations from typing import Any import uvicorn from blacksheep import Application, get from psqlpy import ConnectionPool app = Application() @app.on_start async def on_start(app: Application) -> None: \\\"\\\"\\\"Create a database pool and saves it in the application state.\\\"\\\"\\\" db_pool = ConnectionPool( dsn=\\\"postgres://postgres:postgres@localhost:5432/postgres\\\", max_db_pool_size=10, ) app.services.add_instance(db_pool) @app.on_stop async def on_stop(app: Application) -> None: \\\"\\\"\\\"Close a database pool if it exists in app scope.\\\"\\\"\\\" try: db_pool = app.services.resolve(ConnectionPool) except Exception: ... else: db_pool.close() @get(\\\"/\\\") async def pg_pool_example(db_pool: ConnectionPool) -> list[dict[Any, Any]]: connection = await db_pool.connection() query_result = await connection.execute( \\\"SELECT * FROM users\\\", ) return query_result.result() if __name__ == \\\"__main__\\\": uvicorn.run( \\\"start_example:app\\\", ) \"]},\"165\":{\"h\":\"FastAPI\",\"t\":[\"There is the default example for FastAPI framework.\"]},\"166\":{\"h\":\"Standard example.\",\"t\":[\"This code is perfect for situations when your endpoints don't have complex logic like sending messages over network with some queues (RabbitMQ, NATS, Kafka and etc) or making long calculations, so a connection won't idle to much. You need to take this restrictions into account if you don't have external database connection pool like PGBouncer.\",\"# Start example from contextlib import asynccontextmanager from typing import Annotated, AsyncGenerator, cast from fastapi import Depends, FastAPI, Request from fastapi.responses import JSONResponse from psqlpy import ConnectionPool, Connection import uvicorn @asynccontextmanager async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]: \\\"\\\"\\\"Startup database connection pool and close it on shutdown.\\\"\\\"\\\" db_pool = ConnectionPool( dsn=\\\"postgres://postgres:postgres@localhost:5432/postgres\\\", max_db_pool_size=10, ) app.state.db_pool = db_pool yield db_pool.close() app = FastAPI(lifespan=lifespan) async def db_connection(request: Request) -> Connection: \\\"\\\"\\\"Retrieve new connection from connection pool and return it.\\\"\\\"\\\" return await (cast(ConnectionPool, request.app.state.db_pool)).connection() @app.get(\\\"/\\\") async def pg_pool_example( db_connection: Annotated[Connection, Depends(db_connection)], ): query_result = await db_connection.execute( \\\"SELECT * FROM users\\\", ) return JSONResponse(content=query_result.result()) if __name__ == \\\"__main__\\\": uvicorn.run( \\\"start_example:app\\\", ) \"]},\"167\":{\"h\":\"Advanced example\",\"t\":[\"If you don't have external connection pool like PGBouncer and your application have a lot of endpoints with a lot of complex logic, so it's better not to take a connection from a pool at the start of an endpoint execution (don't use Depends() like in the previous example), because it will be blocked until the end of the endpoint logic. The main idea is take a connection from a pool only for code parts in which it will be used immediately.\",\"# Start example from contextlib import asynccontextmanager from typing import Annotated, AsyncGenerator, cast from fastapi import Depends, FastAPI, Request from fastapi.responses import JSONResponse from psqlpy import ConnectionPool, Connection import uvicorn db_pool = ConnectionPool( dsn=\\\"postgres://postgres:postgres@localhost:5432/postgres\\\", max_db_pool_size=2, ) @asynccontextmanager async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]: \\\"\\\"\\\"Startup database connection pool and close it on shutdown.\\\"\\\"\\\" app.state.db_pool = db_pool yield db_pool.close() app = FastAPI(lifespan=lifespan) async def some_long_func() -> None: # Some very long execution. ... @app.get(\\\"/\\\") async def pg_pool_example(): await some_long_func() db_connection = await db_pool.connection() query_result = await db_connection.execute( \\\"SELECT * FROM users\\\", ) return JSONResponse(content=query_result.result()) if __name__ == \\\"__main__\\\": uvicorn.run( \\\"start_example:app\\\", ) \"]},\"168\":{\"h\":\"Framework Usage\",\"t\":[\"Feature details here.\"]},\"169\":{\"h\":\"Litestar\",\"t\":[\"There is the default example for Litestar framework.\",\"We strongly recommend to use the following example as a standard way to use PSQLPy with Litestar framework.\"]},\"170\":{\"h\":\"Complete example\",\"t\":[\"# Start example from __future__ import annotations from typing import Any, cast import uvicorn from litestar import Litestar, Request, get from psqlpy import ConnectionPool def start_db_pool(app: Litestar) -> ConnectionPool: \\\"\\\"\\\"Return the db pool. If it doesn't exist, creates it and saves it in on the application state object \\\"\\\"\\\" if not getattr(app.state, \\\"db_pool\\\", None): app.state.db_pool = ConnectionPool( dsn=\\\"postgres://postgres:postgres@localhost:5432/postgres\\\", max_db_pool_size=10, ) return cast(\\\"ConnectionPool\\\", app.state.db_pool) async def stop_db_pool(app: Litestar) -> None: \\\"\\\"\\\"Close database connection pool.\\\"\\\"\\\" if getattr(app.state, \\\"db_pool\\\", None): db_pool = cast(ConnectionPool, app.state.db_pool) db_pool.close() @get(\\\"/\\\") async def pg_pool_example(request: Request) -> list[dict[Any, Any]]: db_pool = cast(ConnectionPool, request.app.state.db_pool) connection = await db_pool.connection() query_result = await connection.execute( \\\"SELECT * FROM users\\\", ) return query_result.result() app = Litestar( [pg_pool_example], on_startup=[start_db_pool], on_shutdown=[stop_db_pool], ) if __name__ == \\\"__main__\\\": uvicorn.run( \\\"start_example:app\\\", ) \"]},\"171\":{\"h\":\"Robyn\",\"t\":[\"There is the default example for Robyn framework.\",\"We strongly recommend to use the following example as a standard way to use PSQLPy with Robyn framework.\"]},\"172\":{\"h\":\"Complete example\",\"t\":[\"# Start example from __future__ import annotations import asyncio from typing import Any from psqlpy import ConnectionPool from robyn import Request, Robyn db_pool = ConnectionPool( dsn=\\\"postgres://postgres:postgres@localhost:5432/postgres\\\", max_db_pool_size=10, ) app = Robyn(__file__) @app.get(\\\"/\\\") async def pg_pool_example(request: Request) -> list[dict[Any, Any]]: connection = await db_pool.connection() query_result = await connection.execute( \\\"SELECT * FROM users\\\", ) return query_result.result() async def main() -> None: try: await app.start(host=\\\"127.0.0.1\\\", port=8000) finally: db_pool.close() if __name__ == \\\"__main__\\\": asyncio.run(main()) \"]},\"173\":{\"h\":\"Predefined row factories\",\"t\":[\"We have predefined row_factories for fast usage.\"]},\"174\":{\"h\":\"tuple_row\",\"t\":[\"Instead of dict you can return tuple as a result.\",\"from psqlpy.row_factories import tuple_row ... async def main() -> None: conn_result = await psql_pool.execute( querystring=f\\\"SELECT * FROM {table_name}\\\", ) tuple_res = conn_result.row_factory(row_factory=tuple_row) assert isinstance(tuple_res[0], tuple) \"]},\"175\":{\"h\":\"class_row\",\"t\":[\"You can build class from database result.\",\"from dataclasses import dataclass from psqlpy.row_factories import class_row ... @dataclass class ValidationTestModel: id: int name: str async def main() -> None: conn_result = await psql_pool.execute( querystring=f\\\"SELECT * FROM {table_name}\\\", ) tuple_res = conn_result.row_factory(row_factory=class_row(ValidationTestModel)) assert isinstance(tuple_res[0], ValidationTestModel) \"]},\"176\":{\"h\":\"Row Factories Usage\",\"t\":[\"row_factory must be used when you want to process result from Database in a custom way and return something different from dictionary.\",\"row_factory requires a function that accepts parameter Dict[str, typing.Any] and can return anything you want.\",\"Tips\",\"row_factory can be a function or a class with __call__ method which returns target converted instance.\"]},\"177\":{\"h\":\"Example:\",\"t\":[\"We create custom class and function with this class as a parameter and return function which will be used in processing row from database.\",\"@dataclass class ValidationTestModel: id: int name: str def to_class( class_: Type[ValidationTestModel], ) -> Callable[[Dict[str, Any]], ValidationTestModel]: def to_class_inner(row: Dict[str, Any]) -> ValidationTestModel: return class_(**row) return to_class_inner async def main() -> None: conn_result = await psql_pool.execute( querystring=f\\\"SELECT * FROM {table_name}\\\", ) class_res = conn_result.row_factory(row_factory=to_class(ValidationTestModel)) assert isinstance(class_res[0], ValidationTestModel) \"]},\"178\":{\"h\":\"Advanced Type Usage\",\"t\":[\"Due to an unavailability to support all possible types in PostgreSQL, we have a way to encode Python types into PostgreSQL ones and decode wise versa.\",\"This section has Advanced in the name because you'll need to work with raw bytes which can be difficult for some developers.\"]},\"179\":{\"h\":\"Pass unsupported type into PostgreSQL\",\"t\":[\"If you are using some type that we don't support and want to insert it into PostgreSQL from PSQLPy, you must use PyCustomType class.\",\"Let's assume we have table for_test in the database and PSQLPy doesn't support (only for demonstration) VARCHAR type:\",\"database type\",\"database column name\",\"VARCHAR\",\"nickname\",\"from typing import Final from psqlpy import ConnectionPool from psqlpy.extra_types import PyCustomType async def main() -> None: # It uses default connection parameters db_pool: Final = ConnectionPool() await db_pool.execute( \\\"INSERT INTO for_test (nickname) VALUES ($1)\\\", [PyCustomType(b\\\"SomeDataInBytes\\\")], ) db_pool.close() \",\"Here we pass PyCustomType into the parameters. It accepts only bytes.\",\"Important\",\"You must make bytes passed into PyCustomType readable for PostgreSQL. If bytes will be wrong, you will get an exception.\"]},\"180\":{\"h\":\"Decode unsupported type from PostgreSQL\",\"t\":[\"When you retrieve some data from the PostgreSQL there are can be data types that we don't support yet. To deal with this situation, you can use custom_decoders parameter in result() and as_class() methods.\",\"Let's assume we have table for_test in the database and PSQLPy doesn't support (only for demonstration) VARCHAR type:\",\"database type\",\"database column name\",\"VARCHAR\",\"nickname\",\"from typing import Final, Any from psqlpy import ConnectionPool, QueryResult from psqlpy.extra_types import PyCustomType def nickname_decoder(bytes_from_psql: bytes | None) -> str: return bytes_from_psql.decode() if bytes_from_psql else None async def main() -> None: # It uses default connection parameters db_pool: Final = ConnectionPool() result: QueryResult = await db_pool.execute( \\\"SELECT * FROM for_test\\\", [PyCustomType(b\\\"SomeDataInBytes\\\")], ) parsed_result: list[dict[str, Any]] = result.result( custom_decoders={ \\\"nickname\\\": nickname_decoder, }, ) db_pool.close() \",\"Important\",\"Rules about custom_decoders parameter:\",\"The key of the dict must be the name of the field on which you want to apply the decode function.\",\"If you use aliases for the result field name, you must specify the alias.\",\"The key of the dict must be in lowercase.\"]},\"181\":{\"h\":\"Extra Types\",\"t\":[\"PSQLPy has additional types due to the inability to accurately recognize the type passed from Python.\",\"All extra types available from Python with mapping to PostgreSQL type and Rust type.\",\"PSQLPy type\",\"PostgreSQL type\",\"Rust Type\",\"BigInt\",\"BigInt\",\"i64\",\"Integer\",\"Integer\",\"i32\",\"SmallInt\",\"SmallInt\",\"i16\",\"Float32\",\"FLOAT4\",\"f32\",\"Float64\",\"FLOAT8\",\"f64\",\"PyVarChar\",\"VarChar\",\"String\",\"PyText\",\"Text\",\"String\",\"PyJSON\",\"JSON\",\"serde::Value\",\"PyJSONB\",\"JSONB\",\"serde::Value\",\"PyMacAddr6\",\"MacAddr\",\"MacAddr6\",\"PyMacAddr8\",\"MacAddr8\",\"MacAddr8\"]},\"182\":{\"h\":\"BigInt & Integer & SmallInt & Float32 & Float64\",\"t\":[\"When integer is passed from Python to Rust, it's impossible to understand what type is required on the Database side. Because of this restriction if you are trying to insert or update number value, you need to specify type on Python side explicitly.\",\"Let's assume we have table numbers in the database:\",\"database type\",\"database column name\",\"SmallInt\",\"index\",\"Integer\",\"elf_life\",\"BigInt\",\"elon_musk_money\",\"FLOAT4\",\"rest_money\",\"FLOAT8\",\"company_money\",\"And we want to INSERT new data to this table:\",\"from typing import Final from psqlpy import ConnectionPool, QueryResult from psqlpy.extra_types import SmallInt, Integer, BigInt, Float32, Float64 async def main() -> None: # It uses default connection parameters db_pool: Final = ConnectionPool() await db_pool.execute( \\\"INSERT INTO numbers (index, elf_life, elon_musk_money) VALUES ($1, $2, $3, $4, $5)\\\", [SmallInt(101), Integer(10500), BigInt(300000000000), Float32(123.11), Float64(222.12)], ) db_pool.close() \",\"Important\",\"These types are limited only by the upper bound. These classes work not only as wrappers, but also as validators. For example, you can't pass integer bigger than 32,768 to SmallInt type.\"]},\"183\":{\"h\":\"PyVarChar & PyText\",\"t\":[\"When you need to pass string from Python to PSQLPy and this string must converted into Text PostgreSQL, you need to explicitly mark your string as PyText. If you don't work with PostgreSQL TEXT type, you can pass python str without any extra type.\",\"Let's assume we have table banners in the database:\",\"database type\",\"database column name\",\"VarChar\",\"title\",\"Text\",\"description\",\"from typing import Final from psqlpy import ConnectionPool, QueryResult from psqlpy.extra_types import PyText async def main() -> None: # It uses default connection parameters db_pool: Final = ConnectionPool() await db_pool.execute( \\\"INSERT INTO banners (title, description) VALUES ($1, $2)\\\", [\\\"SomeTitle\\\", PyText(\\\"Very long description\\\")], ) # Alternatively, you can do this: await db_pool.execute( \\\"INSERT INTO banners (title, description) VALUES ($1, $2)\\\", [PyVarChar(\\\"SomeTitle\\\"), PyText(\\\"Very long description\\\")], ) db_pool.close() \"]},\"184\":{\"h\":\"PyJSON & PyJSONB\",\"t\":[\"PyJSON/PyJSONB type exists only for situations when you want to set list of something to JSON/JSONB field. If you have default Python dict like above, you DON'T have to use PyJSON/PyJSONB type.\",\"my_dict = { \\\"just\\\": \\\"regular\\\", \\\"python\\\": \\\"dictionary\\\", \\\"of\\\": [ \\\"values\\\", ], \\\"with\\\": { \\\"nested\\\": \\\"values\\\", } } \",\"On the other side, if you want to set list of values to JSON/JSONB field, you must wrap it in PyJSON/PyJSONB type, otherwise PSQLPy will assume that you passed an array (PostgreSQL ARRAY).\",\"Let's assume we have table users in the database, and field additional_user_info can contain different type of data:\",\"database type\",\"database column name\",\"JSONB\",\"additional_user_info\",\"from typing import Final from psqlpy import ConnectionPool, QueryResult from psqlpy.extra_types import PyJSON async def main() -> None: # It uses default connection parameters db_pool: Final = ConnectionPool() list_for_jsonb_field = [ {\\\"some\\\": \\\"dict\\\"}, [ {\\\"nested\\\": \\\"list of dicts\\\"}, ], ] dict_for_jsonb_field = { \\\"regular\\\": \\\"dict\\\", \\\"with\\\": [ \\\"list\\\", \\\"of\\\", \\\"values\\\", 100, ] } await db_pool.execute( \\\"INSERT INTO users (additional_user_info) VALUES ($1)\\\", [PyJSONB(list_for_jsonb_field)], ) await db_pool.execute( \\\"INSERT INTO users (additional_user_info) VALUES ($1)\\\", [dict_for_jsonb_field,], ) db_pool.close() \"]},\"185\":{\"h\":\"PyMacAddr6 & PyMacAddr8\",\"t\":[\"Mac addresses must be used with PyMacAddr6 and PyMacAddr8 types.\",\"Let's assume we have table devices in the database:\",\"database type\",\"database column name\",\"MACADDR\",\"device_macaddr6\",\"MACADDR8\",\"device_macaddr8\",\"from typing import Final from psqlpy import ConnectionPool, QueryResult from psqlpy.extra_types import PyMacAddr6, PyMacAddr8 async def main() -> None: # It uses default connection parameters db_pool: Final = ConnectionPool() await db_pool.execute( \\\"INSERT INTO devices (device_macaddr6, device_macaddr8) VALUES ($1, $2)\\\", [ PyMacAddr6(\\\"08:00:2b:01:02:03\\\"), PyMacAddr8(\\\"08:00:2b:01:02:03:04:05\\\"), ], ) db_pool.close() \"]},\"186\":{\"h\":\"Supported Types\"},\"187\":{\"h\":\"Simple Type\",\"t\":[\"Here you can find all types supported by PSQLPy. If PSQLPy isn't -, you can go to the Extra Types for more information.\",\"Python type\",\"PSQLPy extra type\",\"PostgreSQL Type\",\"None\",\"-\",\"NULL\",\"bool\",\"-\",\"BOOL\",\"bytes\",\"-\",\"BYTEA\",\"str\",\"-\",\"VARCHAR\",\"str\",\"PyVarChar\",\"VARCHAR\",\"str\",\"PyText\",\"TEXT\",\"str\",\"-\",\"XML\",\"int\",\"SmallInt\",\"SMALLINT\",\"int\",\"INTEGER\",\"INTEGER\",\"int\",\"-\",\"INTEGER\",\"int\",\"BIGINT\",\"BIGINT\",\"float\",\"-\",\"FLOAT4\",\"float\",\"Float32\",\"FLOAT4\",\"float\",\"Float64\",\"FLOAT8\",\"datetime.date\",\"-\",\"DATE\",\"datetime.time\",\"-\",\"TIME\",\"datetime.datetime\",\"-\",\"TIMESTAMP\",\"datetime.datetime\",\"-\",\"TIMESTAMPTZ\",\"UUID\",\"-\",\"UUID\",\"dict\",\"-\",\"JSONB\",\"dict\",\"PyJSONB\",\"JSONB\",\"dict\",\"PyJSON\",\"JSON\",\"Mac Address 6\",\"PyMacAddr6\",\"MacAddr\",\"Mac Address 8\",\"PyMacAddr8\",\"MacAddr\",\"IPv4Address\",\"-\",\"INET\",\"IPv6Address\",\"-\",\"INET\",\"decimal.Decimal\",\"-\",\"NUMERIC\",\"int/str\",\"Money\",\"MONEY\",\"Important\",\"DECIMAL PostgreSQL type isn't supported, use NUMERIC instead.\"]},\"188\":{\"h\":\"Array Type\",\"t\":[\"You can make arrays with any type of Simple Types.\"]},\"189\":{\"h\":\"Example:\",\"t\":[\"CREATE TABLE test (arr_of_json JSONB ARRAY) \"]},\"190\":{\"h\":\"Composite Type\",\"t\":[\"PSQLPy supports composite types.\",\"You can create your own types in PostgreSQL, we will return you dict.\",\"CREATE TYPE custom_type AS (name VARCHAR, metadata JSONB); CREATE TABLE custom_table (user_info custom_type); \",\"Let's insert some data.\",\"INSERT INTO custom_table VALUES (ROW('Alex', '{\\\"age\\\": 50}')); \",\"Now we can see what result will be returned.\",\"from typing import Final from psqlpy import ConnectionPool, QueryResult from psqlpy.extra_types import SmallInt, Integer, BigInt async def main() -> None: # It uses default connection parameters db_pool: Final = ConnectionPool() result = await db_pool.execute( \\\"SELECT user_info FROM custom_table\\\", ) print(result.result()[0]) \",\"It will return:\",\"[ { \\\"user_info\\\": { \\\"name\\\": \\\"Alex\\\", \\\"metadata\\\": { \\\"age\\\": 50, }, }, } ] \"]},\"191\":{\"h\":\"Enum Type\",\"t\":[\"You can use ENUM type in PostgreSQL and Python.\",\"Let's assume we create EnumWeather and table with it.\",\"CREATE TYPE weather AS ENUM ('sun', 'not sun') CREATE table weather_plus (is_weather_good weather) \",\"Let's see how we can INSERT and SELECT such data.\",\"from enum import Enum from typing import Final from psqlpy import ConnectionPool, QueryResult class Weather(str, Enum): SUN = \\\"sun\\\" NOT_SUN = \\\"not sun\\\" async def main() -> None: # It uses default connection parameters db_pool: Final = ConnectionPool() # Insert new data await db_pool.execute( querystring=\\\"INSERT INTO weather_plus VALUES($1)\\\", parameters=[Weather.SUN], ) # Or you can pass string directly await db_pool.execute( querystring=\\\"INSERT INTO weather_plus VALUES($1)\\\", parameters=[\\\"sun\\\"], ) result = await db_pool.execute( querystring=\\\"SELECT * FROM weather_plus\\\", ) print(result.result()[0]) \",\"You will receive:\",\"[ { \\\"is_weather_good\\\": \\\"sun\\\", }, ] \"]},\"192\":{\"h\":\"Types Description\",\"t\":[\"Feature details here.\"]},\"193\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"194\":{\"h\":\"Components\"},\"195\":{\"h\":\"Introduction\"},\"196\":{\"h\":\"Usage\"},\"197\":{\"h\":\"Frameworks\"},\"198\":{\"h\":\"Row Factories\"},\"199\":{\"h\":\"Types\"}},\"dirtCount\":0,\"index\":[[\"8\",{\"1\":{\"187\":1}}],[\"6\",{\"1\":{\"187\":1}}],[\"xml\",{\"1\":{\"187\":1}}],[\"768\",{\"1\":{\"182\":1}}],[\"yet\",{\"1\":{\"180\":1}}],[\"yield\",{\"1\":{\"166\":1,\"167\":1}}],[\"your\",{\"0\":{\"125\":1},\"1\":{\"4\":2,\"5\":2,\"7\":1,\"41\":1,\"154\":3,\"159\":1,\"166\":1,\"167\":1,\"183\":1,\"190\":1}}],[\"you\",{\"1\":{\"3\":1,\"4\":3,\"5\":7,\"6\":2,\"7\":6,\"10\":1,\"14\":1,\"18\":1,\"20\":1,\"22\":1,\"25\":1,\"26\":2,\"36\":3,\"42\":2,\"71\":1,\"76\":1,\"77\":1,\"79\":1,\"81\":1,\"85\":2,\"86\":1,\"125\":8,\"126\":2,\"128\":1,\"129\":1,\"131\":1,\"135\":2,\"137\":1,\"139\":1,\"150\":1,\"154\":1,\"155\":5,\"156\":1,\"158\":2,\"159\":4,\"166\":2,\"167\":1,\"174\":1,\"175\":1,\"176\":2,\"178\":1,\"179\":4,\"180\":5,\"182\":3,\"183\":5,\"184\":6,\"187\":2,\"188\":1,\"190\":2,\"191\":3}}],[\"key\",{\"1\":{\"180\":2}}],[\"keepalive\",{\"1\":{\"28\":4,\"61\":1,\"62\":1,\"63\":3,\"64\":1}}],[\"keepalives\",{\"0\":{\"61\":1,\"62\":1,\"63\":1,\"64\":1},\"1\":{\"28\":8,\"62\":1,\"63\":1,\"64\":1}}],[\"kafka\",{\"1\":{\"166\":1}}],[\"32\",{\"1\":{\"182\":1}}],[\"300000000000\",{\"1\":{\"182\":1}}],[\"3\",{\"1\":{\"141\":6,\"154\":1}}],[\"|\",{\"1\":{\"141\":57,\"180\":1}}],[\"404\",{\"1\":{\"193\":1}}],[\"4\",{\"1\":{\"34\":1}}],[\"50\",{\"1\":{\"190\":2}}],[\"5\",{\"1\":{\"67\":1}}],[\"5678\",{\"1\":{\"28\":1}}],[\"5432\",{\"1\":{\"7\":1,\"28\":1,\"30\":1,\"31\":1,\"42\":1,\"56\":1,\"125\":1,\"126\":1,\"162\":1,\"164\":1,\"166\":1,\"167\":1,\"170\":1,\"172\":1}}],[\"2b\",{\"1\":{\"185\":2}}],[\"222\",{\"1\":{\"182\":1}}],[\"2fpostgresql\",{\"1\":{\"28\":1}}],[\"2flib\",{\"1\":{\"28\":1}}],[\"2fvar\",{\"1\":{\"28\":1}}],[\"2\",{\"1\":{\"28\":1,\"62\":1,\"141\":6,\"154\":1,\"159\":2}}],[\"20\",{\"1\":{\"18\":1,\"135\":1}}],[\"05\",{\"1\":{\"185\":1}}],[\"04\",{\"1\":{\"185\":1}}],[\"03\",{\"1\":{\"185\":2}}],[\"02\",{\"1\":{\"185\":2}}],[\"01\",{\"1\":{\"185\":2}}],[\"00\",{\"1\":{\"185\":2}}],[\"08\",{\"1\":{\"185\":2}}],[\"0\",{\"1\":{\"26\":1,\"28\":1,\"42\":2,\"58\":1,\"172\":2,\"174\":1,\"175\":1,\"177\":1,\"190\":1,\"191\":1}}],[\"versa\",{\"1\":{\"178\":1}}],[\"very\",{\"1\":{\"167\":1,\"183\":2}}],[\"ve\",{\"1\":{\"125\":1}}],[\"venv\",{\"1\":{\"5\":3}}],[\"varchar\",{\"1\":{\"179\":2,\"180\":2,\"181\":1,\"183\":1,\"187\":2,\"190\":1}}],[\"var\",{\"1\":{\"28\":1}}],[\"variant=readvariant\",{\"1\":{\"24\":1}}],[\"variant\",{\"1\":{\"24\":2,\"124\":2}}],[\"validators\",{\"1\":{\"182\":1}}],[\"validationtestmodel\",{\"1\":{\"175\":3,\"177\":6}}],[\"value\",{\"1\":{\"22\":3,\"51\":1,\"63\":1,\"88\":1,\"139\":3,\"181\":2,\"182\":1}}],[\"values\",{\"1\":{\"18\":1,\"125\":1,\"126\":1,\"135\":1,\"141\":1,\"179\":1,\"182\":1,\"183\":2,\"184\":6,\"185\":1,\"190\":1,\"191\":2}}],[\"val\",{\"0\":{\"21\":1,\"138\":1}}],[\"$5\",{\"1\":{\"182\":1}}],[\"$4\",{\"1\":{\"182\":1}}],[\"$3\",{\"1\":{\"182\":1}}],[\"$2\",{\"1\":{\"14\":1,\"16\":1,\"18\":1,\"36\":1,\"38\":1,\"125\":1,\"126\":1,\"131\":1,\"133\":1,\"135\":1,\"141\":1,\"182\":1,\"183\":2,\"185\":1}}],[\"$1\",{\"1\":{\"14\":1,\"16\":1,\"18\":1,\"20\":1,\"22\":1,\"36\":1,\"38\":1,\"67\":1,\"118\":1,\"120\":1,\"125\":1,\"126\":1,\"131\":1,\"133\":1,\"135\":1,\"137\":1,\"139\":1,\"141\":3,\"150\":1,\"159\":1,\"179\":1,\"182\":1,\"183\":2,\"184\":2,\"185\":1,\"191\":2}}],[\"$<number>\",{\"1\":{\"14\":1,\"18\":1,\"36\":1,\"131\":1}}],[\"==\",{\"1\":{\"162\":1,\"164\":1,\"166\":1,\"167\":1,\"170\":1,\"172\":1}}],[\"=\",{\"1\":{\"14\":5,\"16\":5,\"18\":1,\"20\":4,\"22\":2,\"24\":2,\"25\":1,\"29\":1,\"30\":1,\"31\":1,\"36\":4,\"38\":4,\"40\":1,\"42\":1,\"67\":5,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"111\":4,\"113\":5,\"118\":5,\"120\":6,\"125\":5,\"126\":2,\"131\":5,\"133\":5,\"135\":1,\"137\":4,\"139\":2,\"141\":7,\"146\":1,\"148\":2,\"150\":4,\"159\":4,\"162\":8,\"164\":5,\"166\":4,\"167\":5,\"170\":6,\"172\":4,\"174\":2,\"175\":2,\"177\":2,\"179\":1,\"180\":3,\"182\":1,\"183\":1,\"184\":4,\"185\":1,\"190\":2,\"191\":4}}],[\"11\",{\"1\":{\"182\":1}}],[\"12\",{\"1\":{\"182\":1}}],[\"123\",{\"1\":{\"182\":1}}],[\"1234\",{\"1\":{\"28\":1}}],[\"127\",{\"1\":{\"172\":1}}],[\"192\",{\"1\":{\"42\":1}}],[\"15\",{\"1\":{\"33\":1}}],[\"10500\",{\"1\":{\"182\":1}}],[\"101\",{\"1\":{\"182\":1}}],[\"10\",{\"1\":{\"18\":1,\"42\":1,\"66\":1,\"135\":1,\"150\":1,\"162\":1}}],[\"100\",{\"1\":{\"14\":1,\"16\":1,\"20\":1,\"22\":1,\"26\":1,\"36\":1,\"38\":1,\"118\":1,\"120\":1,\"125\":1,\"126\":1,\"131\":1,\"133\":1,\"137\":1,\"139\":1,\"141\":1,\"184\":1}}],[\"1\",{\"1\":{\"14\":1,\"18\":1,\"36\":1,\"42\":1,\"131\":1,\"141\":8,\"159\":1,\"172\":1}}],[\"queues\",{\"1\":{\"166\":1}}],[\"queries=\",{\"1\":{\"141\":1}}],[\"queries\",{\"1\":{\"86\":1,\"141\":5,\"154\":1,\"159\":1}}],[\"querying\",{\"1\":{\"158\":1}}],[\"query\",{\"1\":{\"14\":1,\"20\":2,\"22\":1,\"36\":2,\"66\":1,\"86\":1,\"111\":2,\"113\":2,\"118\":2,\"120\":2,\"125\":1,\"126\":1,\"131\":1,\"137\":2,\"139\":1,\"141\":14,\"159\":1,\"162\":2,\"164\":2,\"166\":1,\"167\":1,\"170\":2,\"172\":2}}],[\"querystrings\",{\"1\":{\"141\":2}}],[\"querystring=f\",{\"1\":{\"174\":1,\"175\":1,\"177\":1}}],[\"querystring=\",{\"1\":{\"67\":1,\"131\":1,\"133\":1,\"150\":1,\"191\":3}}],[\"querystring\",{\"1\":{\"14\":2,\"16\":1,\"18\":2,\"20\":2,\"22\":2,\"36\":2,\"38\":1,\"66\":2,\"131\":1,\"133\":1,\"135\":2,\"137\":2,\"139\":2,\"141\":1,\"150\":2}}],[\"queryresult\",{\"0\":{\"109\":1},\"1\":{\"9\":1,\"14\":1,\"16\":1,\"22\":1,\"36\":1,\"38\":1,\"67\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"108\":1,\"111\":1,\"113\":1,\"131\":1,\"133\":1,\"139\":1,\"141\":2,\"159\":2,\"180\":2,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"190\":1,\"191\":1}}],[\"question\",{\"1\":{\"4\":1,\"154\":1}}],[\">\",{\"1\":{\"5\":3,\"14\":1,\"16\":1,\"18\":1,\"20\":1,\"22\":2,\"24\":1,\"25\":1,\"29\":1,\"30\":1,\"33\":1,\"36\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"67\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"111\":1,\"113\":2,\"118\":1,\"120\":2,\"125\":4,\"126\":1,\"128\":1,\"129\":1,\"131\":1,\"133\":1,\"135\":1,\"137\":1,\"139\":2,\"141\":1,\"143\":1,\"144\":1,\"146\":1,\"148\":1,\"150\":1,\"159\":1,\"162\":2,\"164\":3,\"166\":2,\"167\":2,\"170\":3,\"172\":2,\"174\":1,\"175\":1,\"177\":3,\"179\":1,\"180\":2,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"190\":1,\"191\":1}}],[\"elon\",{\"1\":{\"182\":2}}],[\"elf\",{\"1\":{\"182\":2}}],[\"else\",{\"1\":{\"164\":1,\"180\":1}}],[\"etc\",{\"1\":{\"154\":1,\"166\":1}}],[\"easily\",{\"1\":{\"113\":1,\"120\":1}}],[\"each\",{\"1\":{\"14\":1,\"18\":1,\"28\":2,\"36\":2,\"54\":1,\"55\":1,\"57\":2,\"67\":1,\"131\":1,\"141\":1,\"159\":1}}],[\"error\",{\"1\":{\"85\":1,\"86\":2,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"126\":1}}],[\"errors\",{\"1\":{\"84\":1,\"89\":1,\"90\":1,\"93\":1,\"96\":1,\"103\":1,\"154\":1}}],[\"effect\",{\"1\":{\"28\":1,\"58\":1}}],[\"everything\",{\"1\":{\"125\":1}}],[\"every\",{\"1\":{\"26\":1,\"42\":1,\"154\":2}}],[\"even\",{\"1\":{\"6\":1}}],[\"explicitly\",{\"1\":{\"182\":1,\"183\":1}}],[\"exist\",{\"1\":{\"170\":1}}],[\"exists\",{\"1\":{\"164\":1,\"184\":1}}],[\"extra\",{\"0\":{\"181\":1},\"1\":{\"179\":1,\"180\":1,\"181\":1,\"182\":1,\"183\":2,\"184\":1,\"185\":1,\"187\":2,\"190\":1}}],[\"extremely\",{\"1\":{\"154\":1}}],[\"external\",{\"1\":{\"166\":1,\"167\":1}}],[\"except\",{\"1\":{\"164\":1}}],[\"exception\",{\"1\":{\"20\":1,\"22\":1,\"84\":1,\"86\":1,\"137\":1,\"139\":1,\"164\":1,\"179\":1}}],[\"exceptions\",{\"0\":{\"81\":1,\"82\":1,\"83\":1},\"1\":{\"9\":2,\"81\":2,\"152\":2}}],[\"excess\",{\"1\":{\"32\":1}}],[\"exampleofasclass\",{\"1\":{\"113\":2,\"120\":2}}],[\"example\",{\"0\":{\"162\":1,\"164\":1,\"166\":1,\"167\":1,\"170\":1,\"172\":1,\"177\":1,\"189\":1},\"1\":{\"28\":1,\"126\":1,\"141\":1,\"155\":1,\"159\":1,\"161\":2,\"162\":3,\"163\":2,\"164\":3,\"165\":1,\"166\":3,\"167\":4,\"169\":2,\"170\":4,\"171\":2,\"172\":2,\"182\":1}}],[\"exactly\",{\"1\":{\"20\":1,\"22\":1,\"108\":1,\"137\":1,\"139\":1,\"154\":1}}],[\"executing\",{\"1\":{\"86\":1,\"159\":1}}],[\"execution\",{\"1\":{\"14\":1,\"16\":1,\"18\":1,\"20\":1,\"22\":1,\"36\":1,\"38\":1,\"92\":1,\"94\":1,\"101\":1,\"131\":1,\"133\":1,\"135\":1,\"137\":1,\"139\":1,\"141\":1,\"167\":2}}],[\"executed\",{\"1\":{\"126\":1,\"141\":1}}],[\"execute\",{\"0\":{\"13\":1,\"17\":1,\"35\":1,\"130\":1,\"134\":1},\"1\":{\"14\":2,\"16\":1,\"18\":1,\"36\":5,\"38\":1,\"111\":1,\"113\":1,\"125\":1,\"126\":1,\"131\":2,\"133\":1,\"135\":3,\"141\":1,\"143\":1,\"144\":1,\"146\":1,\"159\":2,\"162\":1,\"164\":1,\"166\":1,\"167\":1,\"170\":1,\"172\":1,\"174\":1,\"175\":1,\"177\":1,\"179\":1,\"180\":1,\"182\":1,\"183\":2,\"184\":2,\"185\":1,\"190\":1,\"191\":3}}],[\"enumweather\",{\"1\":{\"191\":1}}],[\"enum\",{\"0\":{\"191\":1},\"1\":{\"191\":5}}],[\"encode\",{\"1\":{\"178\":1}}],[\"end\",{\"1\":{\"167\":1}}],[\"endpoint\",{\"1\":{\"167\":2}}],[\"endpoints\",{\"1\":{\"166\":1,\"167\":1}}],[\"enough\",{\"1\":{\"26\":1}}],[\"enabled\",{\"1\":{\"7\":1}}],[\"env\",{\"1\":{\"7\":7}}],[\"environment\",{\"0\":{\"5\":1},\"1\":{\"5\":2}}],[\"either\",{\"1\":{\"4\":1,\"54\":1,\"55\":1,\"56\":1,\"113\":1,\"120\":1}}],[\"uvicorn\",{\"1\":{\"164\":2,\"166\":2,\"167\":2,\"170\":2}}],[\"uuid\",{\"1\":{\"87\":2,\"187\":2}}],[\"uuidvalueconverterror\",{\"0\":{\"87\":1}}],[\"unavailability\",{\"1\":{\"178\":1}}],[\"unacknowledged\",{\"1\":{\"28\":1}}],[\"until\",{\"1\":{\"167\":1}}],[\"understand\",{\"1\":{\"154\":1,\"182\":1}}],[\"understanding\",{\"1\":{\"154\":1}}],[\"underlying\",{\"1\":{\"95\":1,\"102\":1,\"107\":1}}],[\"unexpected\",{\"1\":{\"154\":1}}],[\"unsupported\",{\"0\":{\"179\":1,\"180\":1},\"1\":{\"111\":1,\"113\":1,\"115\":1,\"118\":1,\"120\":1,\"122\":1}}],[\"unsuccessful\",{\"1\":{\"18\":1}}],[\"unix\",{\"1\":{\"28\":5,\"54\":2,\"58\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1}}],[\"usually\",{\"1\":{\"154\":1}}],[\"usage\",{\"0\":{\"11\":1,\"160\":1,\"168\":1,\"176\":1,\"178\":1,\"196\":1},\"1\":{\"173\":1}}],[\"using\",{\"1\":{\"6\":1,\"67\":1,\"155\":1,\"158\":1,\"179\":1}}],[\"uses\",{\"1\":{\"159\":1,\"179\":1,\"180\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"190\":1,\"191\":1}}],[\"use\",{\"1\":{\"25\":1,\"28\":1,\"29\":1,\"30\":1,\"36\":1,\"61\":1,\"81\":1,\"126\":2,\"141\":1,\"154\":1,\"159\":1,\"161\":2,\"163\":2,\"167\":1,\"169\":2,\"171\":2,\"179\":1,\"180\":2,\"184\":1,\"187\":1,\"191\":1}}],[\"useful\",{\"1\":{\"25\":1}}],[\"used\",{\"1\":{\"18\":1,\"23\":1,\"28\":4,\"39\":1,\"50\":1,\"56\":2,\"59\":1,\"66\":1,\"71\":1,\"167\":1,\"176\":1,\"177\":1,\"185\":1}}],[\"user=user\",{\"1\":{\"28\":1}}],[\"username=\",{\"1\":{\"29\":1}}],[\"username\",{\"1\":{\"14\":1,\"16\":1,\"20\":1,\"28\":3,\"36\":1,\"38\":1,\"47\":1,\"67\":2,\"111\":1,\"113\":4,\"118\":1,\"120\":4,\"125\":1,\"126\":1,\"131\":1,\"133\":1,\"137\":1,\"141\":2,\"150\":2,\"159\":1}}],[\"user\",{\"0\":{\"47\":1,\"58\":1},\"1\":{\"7\":2,\"26\":1,\"28\":10,\"42\":1,\"58\":2,\"153\":1,\"184\":4,\"190\":3}}],[\"users\",{\"1\":{\"3\":1,\"14\":1,\"16\":1,\"18\":1,\"20\":1,\"22\":1,\"36\":1,\"38\":1,\"67\":1,\"111\":1,\"113\":1,\"118\":1,\"120\":1,\"125\":1,\"126\":1,\"131\":1,\"133\":1,\"135\":1,\"137\":1,\"139\":1,\"141\":3,\"150\":1,\"159\":2,\"162\":1,\"164\":1,\"166\":1,\"167\":1,\"170\":1,\"172\":1,\"184\":3}}],[\"useless\",{\"1\":{\"1\":1}}],[\"u\",{\"1\":{\"5\":1}}],[\"upper\",{\"1\":{\"182\":1}}],[\"update\",{\"1\":{\"182\":1}}],[\"up\",{\"0\":{\"5\":1},\"1\":{\"26\":1,\"141\":1,\"153\":1}}],[\"jsonb\",{\"1\":{\"181\":1,\"184\":7,\"187\":2,\"189\":1,\"190\":1}}],[\"jsonresponse\",{\"1\":{\"166\":2,\"167\":2}}],[\"json\",{\"1\":{\"162\":1,\"181\":1,\"184\":2,\"187\":1,\"189\":1}}],[\"just\",{\"1\":{\"4\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"79\":1,\"184\":1}}],[\"join\",{\"0\":{\"3\":1,\"156\":1}}],[\"own\",{\"0\":{\"125\":1},\"1\":{\"190\":1}}],[\"omitted\",{\"1\":{\"28\":1,\"58\":1}}],[\"optimized\",{\"1\":{\"154\":1}}],[\"option\",{\"1\":{\"28\":4,\"62\":1,\"63\":1,\"64\":1}}],[\"options\",{\"0\":{\"50\":1},\"1\":{\"28\":2,\"50\":1}}],[\"operations\",{\"1\":{\"26\":1,\"153\":1}}],[\"other\",{\"1\":{\"26\":1,\"28\":2,\"30\":1,\"58\":1,\"141\":1,\"153\":1,\"154\":1,\"184\":1}}],[\"otherwise\",{\"1\":{\"25\":1,\"71\":1,\"154\":1,\"184\":1}}],[\"objects\",{\"1\":{\"32\":1,\"65\":1,\"108\":1}}],[\"object\",{\"1\":{\"10\":1,\"14\":1,\"23\":2,\"26\":1,\"115\":1,\"122\":1,\"123\":1,\"125\":2,\"131\":1,\"150\":1,\"153\":1,\"154\":1,\"170\":1}}],[\"overview\",{\"0\":{\"151\":1}}],[\"over\",{\"1\":{\"9\":1,\"166\":1}}],[\"our\",{\"1\":{\"6\":1,\"125\":1,\"126\":1}}],[\"once\",{\"1\":{\"28\":1,\"126\":1}}],[\"only\",{\"1\":{\"20\":1,\"23\":1,\"28\":3,\"39\":1,\"58\":1,\"59\":1,\"65\":1,\"125\":1,\"126\":1,\"137\":1,\"154\":2,\"167\":1,\"179\":2,\"180\":1,\"182\":2,\"184\":1}}],[\"ones\",{\"1\":{\"32\":1,\"178\":1}}],[\"one\",{\"0\":{\"31\":1},\"1\":{\"5\":1,\"20\":1,\"22\":1,\"29\":1,\"59\":1,\"108\":1,\"137\":1,\"139\":1,\"141\":1}}],[\"on\",{\"0\":{\"125\":1},\"1\":{\"5\":1,\"26\":2,\"28\":4,\"54\":1,\"58\":2,\"62\":1,\"63\":1,\"81\":1,\"123\":1,\"154\":1,\"159\":1,\"162\":1,\"164\":4,\"166\":1,\"167\":1,\"170\":3,\"180\":1,\"182\":2,\"184\":1}}],[\"order\",{\"1\":{\"28\":4,\"54\":1,\"55\":1}}],[\"or\",{\"1\":{\"4\":2,\"14\":1,\"16\":1,\"18\":1,\"20\":2,\"22\":2,\"28\":2,\"32\":1,\"36\":2,\"38\":1,\"54\":1,\"55\":1,\"56\":1,\"58\":1,\"62\":1,\"63\":1,\"64\":1,\"66\":1,\"113\":1,\"120\":1,\"125\":1,\"131\":1,\"133\":1,\"135\":1,\"137\":2,\"139\":2,\"141\":1,\"150\":2,\"154\":1,\"155\":1,\"158\":1,\"159\":1,\"166\":1,\"176\":1,\"182\":1,\"191\":1}}],[\"offical\",{\"1\":{\"5\":1}}],[\"official\",{\"1\":{\"5\":1}}],[\"of\",{\"1\":{\"3\":1,\"4\":1,\"5\":1,\"9\":1,\"14\":1,\"16\":1,\"18\":2,\"20\":2,\"22\":2,\"24\":3,\"28\":14,\"29\":1,\"32\":1,\"33\":1,\"34\":3,\"36\":1,\"38\":1,\"41\":1,\"51\":1,\"54\":1,\"55\":1,\"56\":2,\"57\":1,\"59\":2,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"68\":1,\"81\":1,\"111\":1,\"113\":1,\"123\":1,\"124\":3,\"125\":1,\"126\":1,\"131\":1,\"133\":1,\"135\":2,\"137\":2,\"139\":2,\"141\":2,\"143\":1,\"146\":1,\"148\":1,\"150\":2,\"155\":1,\"156\":1,\"159\":1,\"167\":4,\"174\":1,\"180\":3,\"182\":1,\"184\":6,\"188\":1,\"189\":1}}],[\"right\",{\"1\":{\"125\":1}}],[\"robyn\",{\"0\":{\"171\":1},\"1\":{\"171\":2,\"172\":3}}],[\"robust\",{\"1\":{\"42\":1}}],[\"routes\",{\"1\":{\"162\":1}}],[\"rollback\",{\"0\":{\"144\":1,\"145\":1},\"1\":{\"99\":1,\"126\":1,\"143\":1,\"144\":2,\"146\":2}}],[\"rows\",{\"1\":{\"108\":1,\"141\":6}}],[\"row\",{\"0\":{\"19\":1,\"114\":1,\"121\":1,\"136\":1,\"173\":1,\"174\":1,\"175\":1,\"176\":1,\"198\":1},\"1\":{\"20\":2,\"22\":1,\"108\":1,\"115\":1,\"118\":1,\"120\":1,\"122\":1,\"125\":1,\"137\":2,\"139\":1,\"173\":1,\"174\":5,\"175\":5,\"176\":3,\"177\":5,\"190\":1}}],[\"raw\",{\"1\":{\"178\":1}}],[\"rabbitmq\",{\"1\":{\"166\":1}}],[\"raises\",{\"1\":{\"126\":1}}],[\"raised\",{\"1\":{\"20\":1,\"22\":1,\"137\":1,\"139\":1}}],[\"rather\",{\"1\":{\"59\":1}}],[\"random\",{\"1\":{\"28\":3}}],[\"regular\",{\"1\":{\"184\":2}}],[\"rewrite\",{\"1\":{\"150\":1}}],[\"rewritten\",{\"1\":{\"126\":1}}],[\"release\",{\"0\":{\"147\":1},\"1\":{\"148\":2}}],[\"relative\",{\"0\":{\"77\":1},\"1\":{\"77\":3}}],[\"real\",{\"1\":{\"65\":1}}],[\"readable\",{\"1\":{\"179\":1}}],[\"ready\",{\"1\":{\"125\":1,\"158\":1}}],[\"readwrite\",{\"1\":{\"24\":1}}],[\"readvariant\",{\"1\":{\"24\":1}}],[\"read\",{\"1\":{\"24\":3,\"59\":1,\"111\":1,\"113\":1,\"115\":2,\"118\":1,\"120\":1,\"122\":2,\"124\":2,\"141\":1,\"155\":2}}],[\"receive\",{\"1\":{\"141\":6,\"159\":1,\"191\":1}}],[\"recycled\",{\"1\":{\"28\":1,\"46\":1}}],[\"recycling\",{\"0\":{\"46\":1},\"1\":{\"28\":1,\"46\":2}}],[\"recognize\",{\"1\":{\"181\":1}}],[\"records\",{\"1\":{\"71\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1}}],[\"record\",{\"1\":{\"28\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1}}],[\"recommended\",{\"1\":{\"159\":1}}],[\"recommend\",{\"1\":{\"6\":1,\"161\":1,\"163\":1,\"169\":1,\"171\":1}}],[\"remain\",{\"1\":{\"28\":1}}],[\"rest\",{\"1\":{\"182\":1}}],[\"restriction\",{\"1\":{\"182\":1}}],[\"restrictions\",{\"1\":{\"166\":1}}],[\"res\",{\"1\":{\"174\":2,\"175\":2,\"177\":2}}],[\"responses\",{\"1\":{\"166\":1,\"167\":1}}],[\"response\",{\"1\":{\"162\":1}}],[\"resize\",{\"0\":{\"32\":1},\"1\":{\"32\":1,\"33\":1}}],[\"resolved\",{\"1\":{\"28\":1}}],[\"resolve\",{\"1\":{\"28\":1,\"57\":1,\"164\":1}}],[\"result\",{\"0\":{\"110\":1,\"117\":1},\"1\":{\"9\":1,\"14\":1,\"16\":1,\"18\":1,\"20\":6,\"22\":2,\"36\":1,\"38\":1,\"67\":5,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"108\":2,\"111\":5,\"113\":3,\"118\":5,\"120\":3,\"131\":1,\"133\":1,\"137\":6,\"139\":2,\"150\":5,\"159\":2,\"162\":5,\"164\":3,\"166\":3,\"167\":3,\"170\":3,\"172\":3,\"174\":3,\"175\":3,\"176\":1,\"177\":2,\"180\":6,\"190\":4,\"191\":3}}],[\"results\",{\"0\":{\"108\":1},\"1\":{\"9\":1,\"14\":3,\"16\":3,\"36\":3,\"38\":3,\"67\":1,\"108\":2,\"113\":1,\"120\":1,\"131\":3,\"133\":3,\"141\":1,\"152\":1,\"159\":3}}],[\"retries\",{\"0\":{\"64\":1},\"1\":{\"28\":1}}],[\"retrieve\",{\"1\":{\"22\":1,\"34\":2,\"139\":1,\"166\":1,\"180\":1}}],[\"retrieved\",{\"1\":{\"9\":1,\"152\":1}}],[\"returned\",{\"1\":{\"152\":1,\"154\":1,\"190\":1}}],[\"return\",{\"1\":{\"20\":1,\"22\":1,\"137\":1,\"139\":1,\"162\":1,\"164\":1,\"166\":3,\"167\":1,\"170\":3,\"172\":1,\"174\":1,\"176\":2,\"177\":3,\"180\":1,\"190\":2}}],[\"returns\",{\"1\":{\"18\":1,\"25\":1,\"28\":1,\"108\":1,\"176\":1}}],[\"represents\",{\"1\":{\"9\":5,\"10\":1,\"65\":1,\"123\":1,\"150\":1,\"152\":4,\"154\":1}}],[\"requires\",{\"1\":{\"176\":1}}],[\"requirements\",{\"1\":{\"28\":1,\"59\":1}}],[\"required\",{\"1\":{\"7\":1,\"182\":1}}],[\"requests\",{\"1\":{\"34\":1}}],[\"requested\",{\"1\":{\"9\":1,\"152\":1}}],[\"request\",{\"0\":{\"159\":1},\"1\":{\"4\":1,\"141\":1,\"162\":3,\"166\":4,\"167\":1,\"170\":4,\"172\":3}}],[\"runtime\",{\"1\":{\"51\":1}}],[\"run\",{\"1\":{\"6\":2,\"7\":4,\"162\":1,\"164\":1,\"166\":1,\"167\":1,\"170\":1,\"172\":1}}],[\"runs\",{\"1\":{\"4\":1}}],[\"rules\",{\"1\":{\"4\":1,\"180\":1}}],[\"rusttopyvaluemappingerror\",{\"0\":{\"85\":1}}],[\"rustpsqldriverpybaseerror\",{\"0\":{\"84\":1}}],[\"rust\",{\"1\":{\"1\":1,\"5\":3,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"154\":1,\"181\":2,\"182\":1}}],[\"smallint\",{\"0\":{\"182\":1},\"1\":{\"181\":2,\"182\":4,\"187\":2,\"190\":1}}],[\"scope\",{\"1\":{\"164\":1}}],[\"scrollable\",{\"1\":{\"66\":1,\"150\":1}}],[\"scroll\",{\"1\":{\"66\":1,\"150\":1}}],[\"sleep\",{\"1\":{\"162\":1}}],[\"shutdown=\",{\"1\":{\"170\":1}}],[\"shutdown\",{\"1\":{\"166\":1,\"167\":1}}],[\"shutting\",{\"1\":{\"159\":1}}],[\"should\",{\"1\":{\"4\":1,\"141\":1}}],[\"shows\",{\"1\":{\"1\":1}}],[\"saves\",{\"1\":{\"164\":1,\"170\":1}}],[\"savepoint\",{\"0\":{\"142\":1,\"145\":1,\"147\":1},\"1\":{\"100\":1,\"143\":7,\"146\":7,\"148\":6}}],[\"say\",{\"1\":{\"125\":1}}],[\"same\",{\"1\":{\"16\":1,\"31\":1,\"38\":1,\"54\":1,\"55\":1,\"56\":1,\"133\":1,\"135\":1}}],[\"spent\",{\"1\":{\"141\":1}}],[\"specify\",{\"1\":{\"66\":1,\"71\":1,\"76\":1,\"77\":1,\"79\":1,\"180\":1,\"182\":1}}],[\"specified\",{\"1\":{\"28\":1,\"54\":1,\"55\":1,\"56\":1,\"146\":1,\"154\":1}}],[\"specifies\",{\"1\":{\"28\":1}}],[\"split\",{\"1\":{\"81\":1}}],[\"space\",{\"1\":{\"32\":1}}],[\"system\",{\"1\":{\"28\":1,\"58\":1}}],[\"systems\",{\"1\":{\"28\":2,\"54\":1,\"58\":2}}],[\"ssl\",{\"0\":{\"52\":1},\"1\":{\"7\":4,\"28\":3,\"52\":1,\"53\":1}}],[\"stop\",{\"1\":{\"41\":1,\"162\":1,\"164\":2,\"170\":2}}],[\"standard\",{\"0\":{\"166\":1},\"1\":{\"161\":1,\"163\":1,\"169\":1,\"171\":1}}],[\"state\",{\"1\":{\"164\":1,\"166\":2,\"167\":1,\"170\":7}}],[\"statements\",{\"1\":{\"20\":1,\"22\":1,\"36\":1,\"135\":1,\"137\":1,\"139\":1,\"141\":1,\"155\":1}}],[\"statement\",{\"1\":{\"14\":3,\"16\":3,\"18\":3,\"20\":2,\"22\":2,\"36\":3,\"38\":3,\"131\":3,\"133\":3,\"135\":2,\"137\":2,\"139\":2,\"150\":2,\"155\":2}}],[\"status\",{\"0\":{\"34\":1},\"1\":{\"34\":1}}],[\"start\",{\"0\":{\"69\":1,\"157\":1},\"1\":{\"69\":1,\"125\":1,\"128\":1,\"150\":1,\"158\":1,\"162\":3,\"164\":4,\"166\":2,\"167\":3,\"170\":4,\"172\":2}}],[\"starting\",{\"1\":{\"54\":1}}],[\"startup=\",{\"1\":{\"170\":1}}],[\"startup\",{\"1\":{\"26\":1,\"126\":1,\"141\":1,\"162\":1,\"166\":1,\"167\":1}}],[\"started\",{\"1\":{\"26\":1,\"153\":1}}],[\"starts\",{\"1\":{\"14\":1,\"18\":1,\"36\":1,\"131\":1}}],[\"strongly\",{\"1\":{\"161\":1,\"163\":1,\"169\":1,\"171\":1}}],[\"structure\",{\"1\":{\"141\":1}}],[\"struct\",{\"1\":{\"63\":1}}],[\"struggle\",{\"1\":{\"4\":1}}],[\"str\",{\"1\":{\"14\":1,\"16\":1,\"36\":1,\"38\":1,\"111\":1,\"113\":1,\"118\":1,\"120\":1,\"131\":1,\"133\":1,\"175\":1,\"176\":1,\"177\":3,\"180\":2,\"183\":1,\"187\":5,\"191\":1}}],[\"string\",{\"1\":{\"14\":2,\"16\":2,\"18\":2,\"20\":2,\"22\":2,\"28\":1,\"36\":2,\"38\":2,\"87\":1,\"88\":1,\"131\":2,\"133\":2,\"135\":2,\"137\":2,\"139\":2,\"150\":2,\"181\":2,\"183\":3,\"191\":1}}],[\"step\",{\"1\":{\"5\":2}}],[\"simple\",{\"0\":{\"187\":1},\"1\":{\"188\":1}}],[\"significant\",{\"1\":{\"154\":1}}],[\"situations\",{\"1\":{\"81\":1,\"155\":1,\"166\":1,\"184\":1}}],[\"situation\",{\"1\":{\"67\":1,\"180\":1}}],[\"site\",{\"1\":{\"5\":1}}],[\"size=2\",{\"1\":{\"167\":1}}],[\"size=10\",{\"1\":{\"29\":1,\"30\":1,\"31\":1,\"162\":1,\"164\":1,\"166\":1,\"170\":1,\"172\":1}}],[\"size\",{\"0\":{\"45\":1},\"1\":{\"26\":2,\"28\":2,\"32\":1,\"33\":2,\"34\":4,\"42\":1,\"45\":1}}],[\"side\",{\"1\":{\"26\":1,\"123\":1,\"141\":1,\"153\":1,\"182\":2,\"184\":1}}],[\"singlequeryresult\",{\"0\":{\"116\":1},\"1\":{\"9\":1,\"20\":1,\"108\":1,\"118\":1,\"120\":1,\"137\":1}}],[\"single\",{\"1\":{\"9\":2,\"10\":1,\"39\":1,\"40\":1,\"56\":1,\"152\":1}}],[\"since\",{\"1\":{\"4\":1,\"5\":1}}],[\"s\",{\"0\":{\"157\":1},\"1\":{\"5\":1,\"25\":1,\"71\":1,\"87\":1,\"125\":1,\"159\":1,\"167\":1,\"179\":1,\"180\":1,\"182\":2,\"183\":1,\"184\":1,\"185\":1,\"190\":1,\"191\":2}}],[\"see\",{\"1\":{\"190\":1,\"191\":1}}],[\"search\",{\"1\":{\"154\":1}}],[\"sequential\",{\"1\":{\"141\":1}}],[\"sending\",{\"1\":{\"141\":1,\"166\":1}}],[\"send\",{\"1\":{\"141\":7,\"159\":1}}],[\"sent\",{\"1\":{\"28\":2,\"62\":1,\"64\":1,\"141\":1}}],[\"self\",{\"1\":{\"113\":2,\"120\":2}}],[\"select\",{\"1\":{\"14\":1,\"16\":1,\"20\":1,\"22\":1,\"36\":1,\"38\":1,\"67\":1,\"111\":1,\"113\":1,\"118\":1,\"120\":1,\"131\":1,\"133\":1,\"137\":1,\"139\":1,\"141\":4,\"150\":1,\"159\":1,\"162\":1,\"164\":1,\"166\":1,\"167\":1,\"170\":1,\"172\":1,\"174\":1,\"175\":1,\"177\":1,\"180\":1,\"190\":1,\"191\":2}}],[\"separately\",{\"1\":{\"29\":1,\"57\":1}}],[\"separate\",{\"0\":{\"29\":1}}],[\"section\",{\"1\":{\"152\":1,\"178\":1}}],[\"secondary\",{\"1\":{\"59\":1}}],[\"seconds\",{\"1\":{\"28\":2}}],[\"sec\",{\"1\":{\"28\":8}}],[\"session\",{\"0\":{\"59\":1},\"1\":{\"28\":5,\"59\":1}}],[\"serde\",{\"1\":{\"181\":2}}],[\"services\",{\"1\":{\"164\":2}}],[\"servers\",{\"1\":{\"59\":1}}],[\"server\",{\"1\":{\"7\":1,\"28\":3,\"50\":1,\"59\":1,\"141\":4}}],[\"serializable\",{\"1\":{\"24\":1}}],[\"sets\",{\"1\":{\"28\":1,\"63\":2,\"64\":1}}],[\"set\",{\"1\":{\"7\":1,\"26\":2,\"28\":3,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"57\":1,\"58\":2,\"59\":1,\"60\":1,\"62\":1,\"184\":2}}],[\"settings\",{\"1\":{\"6\":1}}],[\"setting\",{\"0\":{\"5\":1}}],[\"several\",{\"1\":{\"4\":1}}],[\"such\",{\"1\":{\"191\":1}}],[\"successful\",{\"1\":{\"28\":1}}],[\"sun\",{\"1\":{\"191\":9}}],[\"subclasses\",{\"1\":{\"81\":1}}],[\"sure\",{\"1\":{\"4\":1,\"154\":1}}],[\"supported\",{\"0\":{\"186\":1},\"1\":{\"28\":1,\"58\":1,\"85\":1,\"187\":2}}],[\"supports\",{\"1\":{\"14\":1,\"18\":1,\"36\":1,\"131\":1,\"190\":1}}],[\"support\",{\"1\":{\"3\":1,\"156\":1,\"178\":1,\"179\":2,\"180\":2}}],[\"sockets\",{\"1\":{\"28\":4,\"54\":1,\"62\":1,\"63\":1,\"64\":1}}],[\"socket\",{\"1\":{\"28\":2,\"57\":1,\"58\":1,\"61\":1}}],[\"social\",{\"1\":{\"3\":1,\"156\":1}}],[\"so\",{\"1\":{\"7\":1,\"18\":1,\"26\":1,\"86\":1,\"125\":2,\"126\":1,\"154\":1,\"166\":1,\"167\":1}}],[\"source\",{\"1\":{\"5\":1}}],[\"solves\",{\"1\":{\"4\":1}}],[\"somedatainbytes\",{\"1\":{\"179\":1,\"180\":1}}],[\"sometitle\",{\"1\":{\"183\":2}}],[\"sometimes\",{\"1\":{\"20\":1,\"137\":1}}],[\"something\",{\"1\":{\"4\":1,\"67\":1,\"150\":1,\"176\":1,\"184\":1}}],[\"somewhere\",{\"1\":{\"7\":1}}],[\"some\",{\"1\":{\"3\":1,\"9\":1,\"16\":1,\"22\":1,\"38\":1,\"67\":1,\"108\":1,\"133\":1,\"139\":1,\"141\":2,\"150\":1,\"152\":1,\"155\":1,\"156\":1,\"166\":1,\"167\":3,\"178\":1,\"179\":1,\"180\":1,\"184\":1,\"190\":1}}],[\"go\",{\"1\":{\"154\":1,\"187\":1}}],[\"good\",{\"1\":{\"125\":1,\"191\":2}}],[\"goals\",{\"1\":{\"1\":1}}],[\"gives\",{\"1\":{\"26\":1,\"153\":1}}],[\"give\",{\"1\":{\"9\":1,\"152\":1}}],[\"git\",{\"1\":{\"6\":1,\"158\":1}}],[\"guide\",{\"0\":{\"4\":1},\"1\":{\"4\":1}}],[\"getattr\",{\"1\":{\"170\":2}}],[\"get\",{\"1\":{\"3\":1,\"10\":1,\"39\":1,\"40\":1,\"85\":1,\"86\":1,\"111\":1,\"113\":1,\"118\":1,\"120\":1,\"125\":1,\"156\":1,\"162\":1,\"164\":2,\"166\":1,\"167\":1,\"170\":2,\"172\":1,\"179\":1}}],[\"ll\",{\"1\":{\"178\":1}}],[\"last\",{\"0\":{\"75\":1},\"1\":{\"75\":2}}],[\"let\",{\"0\":{\"157\":1},\"1\":{\"159\":1,\"179\":1,\"180\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"190\":1,\"191\":2}}],[\"level=isolationlevel\",{\"1\":{\"24\":1}}],[\"level\",{\"1\":{\"24\":2,\"28\":1,\"57\":1,\"124\":2}}],[\"less\",{\"1\":{\"4\":1}}],[\"life\",{\"1\":{\"182\":2}}],[\"lifespan=lifespan\",{\"1\":{\"166\":1,\"167\":1}}],[\"lifespan\",{\"1\":{\"166\":1,\"167\":1}}],[\"litestar\",{\"0\":{\"169\":1},\"1\":{\"169\":2,\"170\":5}}],[\"lib\",{\"1\":{\"28\":1}}],[\"library\",{\"1\":{\"26\":1,\"85\":1,\"153\":1,\"154\":2}}],[\"limited\",{\"1\":{\"182\":1}}],[\"limit\",{\"1\":{\"28\":3,\"57\":1}}],[\"line\",{\"1\":{\"28\":1,\"50\":1}}],[\"lints\",{\"1\":{\"6\":1}}],[\"linting\",{\"0\":{\"6\":1}}],[\"list\",{\"1\":{\"9\":1,\"14\":2,\"16\":2,\"18\":2,\"20\":2,\"22\":2,\"36\":3,\"38\":2,\"67\":1,\"111\":2,\"113\":2,\"131\":2,\"133\":2,\"135\":2,\"137\":2,\"139\":2,\"141\":2,\"150\":3,\"159\":1,\"164\":1,\"170\":1,\"172\":1,\"180\":1,\"184\":6}}],[\"like\",{\"1\":{\"1\":1,\"141\":1,\"150\":1,\"166\":2,\"167\":2,\"184\":1}}],[\"lowercase\",{\"1\":{\"180\":1}}],[\"long\",{\"1\":{\"166\":1,\"167\":3,\"183\":2}}],[\"logic\",{\"1\":{\"166\":1,\"167\":2}}],[\"lot\",{\"1\":{\"68\":1,\"81\":1,\"167\":2}}],[\"lots\",{\"1\":{\"4\":1}}],[\"localhost\",{\"1\":{\"7\":1,\"28\":2,\"29\":1,\"30\":1,\"31\":1,\"125\":1,\"126\":1,\"162\":1,\"164\":1,\"166\":1,\"167\":1,\"170\":1,\"172\":1}}],[\"locally\",{\"1\":{\"4\":1}}],[\"love\",{\"1\":{\"4\":1}}],[\"load\",{\"0\":{\"60\":1},\"1\":{\"1\":1,\"26\":1,\"28\":1,\"36\":1,\"60\":1,\"159\":1}}],[\"here\",{\"1\":{\"42\":1,\"67\":1,\"155\":1,\"160\":1,\"168\":1,\"179\":1,\"187\":1,\"192\":1}}],[\"hours\",{\"1\":{\"28\":1,\"62\":1}}],[\"holds\",{\"1\":{\"9\":1,\"26\":1,\"152\":1,\"153\":1}}],[\"hostaddr\",{\"0\":{\"55\":1},\"1\":{\"55\":1}}],[\"hostaddrs\",{\"1\":{\"54\":1,\"55\":3}}],[\"host=\",{\"1\":{\"28\":1,\"29\":1,\"172\":1}}],[\"host3\",{\"1\":{\"28\":1}}],[\"host2\",{\"1\":{\"28\":1}}],[\"host1\",{\"1\":{\"28\":1}}],[\"hostname\",{\"1\":{\"28\":1}}],[\"hostnames\",{\"1\":{\"28\":1,\"57\":1}}],[\"hosts\",{\"0\":{\"60\":1},\"1\":{\"28\":8,\"54\":3,\"55\":1,\"56\":2}}],[\"host\",{\"0\":{\"54\":1},\"1\":{\"7\":2,\"28\":4,\"42\":1,\"54\":2,\"57\":1,\"60\":1}}],[\"hook\",{\"1\":{\"6\":1}}],[\"how\",{\"0\":{\"2\":1},\"1\":{\"24\":3,\"28\":1,\"29\":1,\"46\":1,\"123\":1,\"124\":3,\"155\":1,\"191\":1}}],[\"handle\",{\"1\":{\"26\":1,\"86\":1,\"125\":1}}],[\"have\",{\"1\":{\"4\":1,\"6\":1,\"7\":3,\"9\":1,\"42\":1,\"81\":1,\"125\":1,\"126\":1,\"141\":1,\"152\":1,\"154\":2,\"159\":1,\"166\":2,\"167\":2,\"173\":1,\"178\":1,\"179\":1,\"180\":1,\"182\":1,\"183\":1,\"184\":3,\"185\":1}}],[\"has\",{\"1\":{\"1\":2,\"28\":1,\"31\":1,\"34\":1,\"42\":1,\"58\":1,\"76\":1,\"77\":1,\"79\":1,\"178\":1,\"181\":1}}],[\"highly\",{\"1\":{\"6\":1}}],[\"high\",{\"1\":{\"1\":1,\"36\":1,\"159\":1}}],[\"classes\",{\"1\":{\"154\":1,\"182\":1}}],[\"class=exampleofasclass\",{\"1\":{\"113\":1,\"120\":1}}],[\"class\",{\"0\":{\"112\":1,\"119\":1,\"175\":1},\"1\":{\"113\":7,\"120\":7,\"175\":3,\"176\":1,\"177\":11,\"179\":1,\"180\":1,\"191\":1}}],[\"classic\",{\"1\":{\"42\":1}}],[\"clustered\",{\"1\":{\"59\":1}}],[\"client\",{\"1\":{\"28\":1,\"141\":3}}],[\"closed\",{\"1\":{\"28\":1,\"95\":1,\"102\":1,\"107\":1}}],[\"close\",{\"0\":{\"41\":1,\"70\":1},\"1\":{\"25\":1,\"41\":2,\"70\":2,\"105\":1,\"159\":2,\"162\":2,\"164\":2,\"166\":2,\"167\":2,\"170\":2,\"172\":1,\"179\":1,\"180\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1}}],[\"cp\",{\"1\":{\"28\":1}}],[\"crucial\",{\"1\":{\"25\":1}}],[\"credentials\",{\"1\":{\"7\":1}}],[\"creation\",{\"1\":{\"143\":1}}],[\"creators\",{\"1\":{\"3\":1,\"156\":1}}],[\"creates\",{\"1\":{\"26\":1,\"153\":1,\"170\":1}}],[\"created\",{\"1\":{\"5\":1}}],[\"create\",{\"0\":{\"31\":1,\"142\":1},\"1\":{\"1\":1,\"4\":2,\"26\":2,\"42\":1,\"44\":1,\"69\":1,\"143\":1,\"146\":1,\"148\":1,\"150\":1,\"164\":1,\"177\":1,\"189\":1,\"190\":3,\"191\":3}}],[\"currently\",{\"1\":{\"108\":1}}],[\"current\",{\"1\":{\"34\":1}}],[\"cursorclosederror\",{\"0\":{\"107\":1}}],[\"cursorcloseerror\",{\"0\":{\"105\":1}}],[\"cursorfetcherror\",{\"0\":{\"106\":1}}],[\"cursorstarterror\",{\"0\":{\"104\":1}}],[\"cursor\",{\"0\":{\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"149\":1},\"1\":{\"9\":2,\"25\":1,\"65\":2,\"66\":2,\"67\":4,\"68\":1,\"69\":2,\"70\":2,\"71\":3,\"72\":2,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":2,\"79\":1,\"80\":2,\"81\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"150\":7,\"152\":2,\"154\":1,\"159\":1}}],[\"custom\",{\"1\":{\"9\":1,\"111\":2,\"113\":3,\"115\":3,\"118\":2,\"120\":3,\"122\":3,\"152\":1,\"176\":1,\"177\":1,\"180\":3,\"190\":5}}],[\"choose\",{\"1\":{\"126\":1}}],[\"chandr\",{\"1\":{\"159\":1}}],[\"changes\",{\"1\":{\"125\":3}}],[\"change\",{\"1\":{\"32\":1}}],[\"chainable\",{\"1\":{\"9\":1,\"42\":1}}],[\"checker\",{\"1\":{\"154\":1}}],[\"checking\",{\"0\":{\"6\":1}}],[\"check\",{\"1\":{\"5\":1,\"42\":1}}],[\"cert\",{\"1\":{\"7\":1}}],[\"calculations\",{\"1\":{\"166\":1}}],[\"call\",{\"1\":{\"159\":2,\"176\":1}}],[\"called\",{\"1\":{\"126\":1}}],[\"calls\",{\"1\":{\"126\":2}}],[\"callable\",{\"1\":{\"115\":1,\"122\":1,\"177\":1}}],[\"calling\",{\"1\":{\"54\":1,\"55\":1,\"56\":1}}],[\"cast\",{\"1\":{\"162\":3,\"166\":2,\"167\":1,\"170\":4}}],[\"cases\",{\"1\":{\"141\":1}}],[\"case\",{\"1\":{\"56\":1}}],[\"caution\",{\"1\":{\"36\":1,\"159\":1}}],[\"capacity\",{\"1\":{\"32\":1}}],[\"ca\",{\"0\":{\"53\":1},\"1\":{\"7\":1,\"28\":2,\"53\":1}}],[\"cannot\",{\"1\":{\"26\":1,\"88\":1}}],[\"can\",{\"1\":{\"3\":1,\"5\":1,\"6\":1,\"7\":1,\"9\":3,\"14\":1,\"23\":1,\"28\":3,\"36\":1,\"42\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"59\":1,\"65\":1,\"71\":1,\"81\":1,\"85\":1,\"86\":1,\"113\":1,\"120\":1,\"123\":1,\"125\":2,\"126\":1,\"128\":1,\"129\":1,\"131\":1,\"141\":1,\"150\":1,\"152\":3,\"154\":1,\"155\":3,\"156\":1,\"158\":1,\"174\":1,\"175\":1,\"176\":2,\"178\":1,\"180\":2,\"182\":1,\"183\":2,\"184\":1,\"187\":2,\"188\":1,\"190\":2,\"191\":3}}],[\"ci\",{\"1\":{\"4\":2}}],[\"column\",{\"1\":{\"179\":1,\"180\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1}}],[\"covert\",{\"1\":{\"85\":1,\"86\":1}}],[\"cool\",{\"1\":{\"40\":1,\"126\":1}}],[\"code\",{\"1\":{\"36\":1,\"81\":1,\"154\":1,\"159\":1,\"166\":1,\"167\":1}}],[\"count=10\",{\"1\":{\"79\":1}}],[\"count\",{\"1\":{\"22\":1,\"79\":1,\"139\":1}}],[\"could\",{\"1\":{\"7\":1}}],[\"concentrate\",{\"1\":{\"154\":1}}],[\"confidence\",{\"1\":{\"154\":1}}],[\"configuration\",{\"1\":{\"52\":1,\"54\":1,\"55\":1,\"56\":1,\"91\":1}}],[\"configure\",{\"1\":{\"7\":1,\"24\":2,\"28\":1,\"50\":1,\"124\":2}}],[\"configured\",{\"1\":{\"6\":1}}],[\"converted\",{\"1\":{\"176\":1,\"183\":1}}],[\"convert\",{\"1\":{\"87\":1,\"88\":1}}],[\"conn\",{\"0\":{\"46\":1},\"1\":{\"28\":1,\"174\":2,\"175\":2,\"177\":2}}],[\"connecting\",{\"1\":{\"28\":4}}],[\"connectionclosederror\",{\"0\":{\"95\":1}}],[\"connectionexecuteerror\",{\"0\":{\"94\":1}}],[\"connection\",{\"0\":{\"10\":1,\"12\":1,\"26\":1,\"27\":1,\"29\":1,\"30\":1,\"31\":1,\"40\":1,\"42\":1,\"153\":1},\"1\":{\"9\":3,\"10\":4,\"14\":4,\"16\":3,\"18\":3,\"20\":2,\"22\":3,\"23\":1,\"24\":3,\"25\":5,\"26\":7,\"28\":8,\"29\":1,\"32\":1,\"34\":7,\"36\":3,\"39\":2,\"40\":4,\"41\":1,\"45\":1,\"46\":3,\"57\":1,\"62\":1,\"64\":1,\"67\":3,\"81\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"102\":1,\"107\":1,\"111\":3,\"113\":3,\"118\":2,\"120\":3,\"125\":7,\"126\":3,\"131\":3,\"133\":3,\"135\":3,\"137\":3,\"139\":3,\"141\":3,\"146\":1,\"148\":3,\"150\":1,\"152\":5,\"153\":3,\"159\":4,\"162\":5,\"164\":3,\"166\":13,\"167\":8,\"170\":4,\"172\":3,\"179\":1,\"180\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"190\":1,\"191\":1}}],[\"connections\",{\"1\":{\"9\":1,\"26\":1,\"28\":1,\"58\":1,\"61\":1,\"152\":1}}],[\"connectionpoolexecuteerror\",{\"0\":{\"92\":1}}],[\"connectionpoolconfigurationerror\",{\"0\":{\"91\":1}}],[\"connectionpoolbuilderror\",{\"0\":{\"90\":1}}],[\"connectionpoolbuilder\",{\"0\":{\"43\":1},\"1\":{\"9\":1,\"42\":2,\"44\":1}}],[\"connectionpool\",{\"0\":{\"28\":1},\"1\":{\"9\":3,\"10\":1,\"26\":1,\"29\":2,\"30\":2,\"31\":1,\"36\":1,\"40\":1,\"42\":1,\"44\":1,\"67\":2,\"81\":1,\"111\":1,\"113\":1,\"118\":1,\"120\":1,\"125\":2,\"126\":2,\"141\":2,\"159\":3,\"162\":4,\"164\":4,\"166\":3,\"167\":2,\"170\":6,\"172\":2,\"179\":2,\"180\":2,\"182\":2,\"183\":2,\"184\":2,\"185\":2,\"190\":2,\"191\":2}}],[\"connect\",{\"0\":{\"57\":1},\"1\":{\"28\":5,\"29\":1,\"31\":3,\"59\":1}}],[\"content=query\",{\"1\":{\"166\":1,\"167\":1}}],[\"contextlib\",{\"1\":{\"166\":1,\"167\":1}}],[\"context\",{\"0\":{\"126\":1},\"1\":{\"25\":1,\"39\":2,\"126\":3}}],[\"contain\",{\"1\":{\"184\":1}}],[\"contains\",{\"1\":{\"85\":1}}],[\"containing\",{\"1\":{\"54\":1}}],[\"contrast\",{\"1\":{\"141\":1}}],[\"control\",{\"0\":{\"125\":1,\"126\":1},\"1\":{\"61\":1}}],[\"controls\",{\"1\":{\"28\":2}}],[\"contributors\",{\"1\":{\"4\":2}}],[\"contributions\",{\"1\":{\"4\":1}}],[\"contribution\",{\"0\":{\"4\":1}}],[\"combination\",{\"1\":{\"28\":1}}],[\"common\",{\"1\":{\"67\":1}}],[\"command\",{\"1\":{\"6\":1,\"28\":1,\"50\":1}}],[\"commands\",{\"1\":{\"5\":1}}],[\"committed\",{\"1\":{\"125\":1}}],[\"commit\",{\"0\":{\"129\":1},\"1\":{\"6\":3,\"25\":1,\"98\":1,\"125\":4,\"126\":1,\"129\":2}}],[\"community\",{\"0\":{\"3\":1,\"156\":1}}],[\"composite\",{\"0\":{\"190\":1},\"1\":{\"190\":1}}],[\"component\",{\"1\":{\"42\":1,\"154\":1}}],[\"components\",{\"0\":{\"8\":1,\"9\":1,\"151\":1,\"152\":1,\"194\":1},\"1\":{\"1\":1}}],[\"company\",{\"1\":{\"182\":1}}],[\"complex\",{\"1\":{\"166\":1,\"167\":1}}],[\"complete\",{\"0\":{\"162\":1,\"164\":1,\"170\":1,\"172\":1}}],[\"completes\",{\"1\":{\"141\":1}}],[\"complicated\",{\"1\":{\"125\":1}}],[\"computer\",{\"1\":{\"5\":1}}],[\"mypy\",{\"1\":{\"154\":1}}],[\"my\",{\"1\":{\"143\":2,\"146\":2,\"148\":1,\"184\":1}}],[\"mydb\",{\"1\":{\"28\":2}}],[\"msgspec\",{\"1\":{\"113\":1,\"120\":1}}],[\"money\",{\"1\":{\"182\":4,\"187\":2}}],[\"more\",{\"1\":{\"111\":1,\"113\":1,\"115\":2,\"118\":1,\"120\":1,\"122\":2,\"141\":1,\"155\":1,\"187\":1}}],[\"most\",{\"1\":{\"67\":1}}],[\"modedocs\",{\"1\":{\"155\":2}}],[\"model\",{\"1\":{\"113\":1,\"120\":1}}],[\"mode\",{\"0\":{\"52\":1},\"1\":{\"7\":4,\"28\":2}}],[\"musk\",{\"1\":{\"182\":2}}],[\"must\",{\"1\":{\"5\":1,\"10\":1,\"14\":1,\"18\":1,\"20\":1,\"22\":1,\"26\":1,\"36\":3,\"39\":1,\"54\":1,\"55\":1,\"56\":1,\"76\":1,\"77\":1,\"79\":1,\"131\":1,\"137\":1,\"139\":1,\"141\":1,\"153\":1,\"159\":2,\"176\":1,\"179\":2,\"180\":3,\"183\":1,\"184\":1,\"185\":1}}],[\"much\",{\"1\":{\"154\":1,\"166\":1}}],[\"multiple\",{\"1\":{\"28\":3,\"54\":2,\"55\":2,\"56\":2,\"57\":1,\"108\":1,\"141\":1}}],[\"michail\",{\"1\":{\"159\":1}}],[\"minimal\",{\"1\":{\"159\":1}}],[\"minimizing\",{\"1\":{\"141\":1}}],[\"minimum\",{\"1\":{\"26\":1}}],[\"mirror\",{\"1\":{\"1\":1}}],[\"m\",{\"1\":{\"5\":1}}],[\"metadata\",{\"1\":{\"190\":2}}],[\"methods\",{\"0\":{\"12\":1,\"27\":1,\"43\":1,\"68\":1,\"109\":1,\"116\":1,\"127\":1},\"1\":{\"42\":2,\"68\":1,\"180\":1}}],[\"method\",{\"0\":{\"46\":1},\"1\":{\"10\":1,\"14\":1,\"16\":1,\"18\":2,\"25\":2,\"28\":1,\"36\":2,\"38\":1,\"40\":1,\"42\":1,\"46\":2,\"54\":1,\"55\":1,\"56\":1,\"66\":1,\"131\":1,\"133\":1,\"159\":1,\"176\":1}}],[\"messages\",{\"1\":{\"166\":1}}],[\"message\",{\"1\":{\"28\":1}}],[\"merging\",{\"1\":{\"4\":1}}],[\"media\",{\"1\":{\"3\":1,\"156\":1}}],[\"mac\",{\"1\":{\"185\":1,\"187\":2}}],[\"macaddr8\",{\"1\":{\"181\":2,\"185\":3}}],[\"macaddr6\",{\"1\":{\"181\":1,\"185\":2}}],[\"macaddr\",{\"1\":{\"88\":1,\"181\":1,\"185\":1,\"187\":2}}],[\"macaddrconversionerror\",{\"0\":{\"88\":1}}],[\"mark\",{\"1\":{\"183\":1}}],[\"marked\",{\"1\":{\"14\":1,\"18\":1,\"36\":1,\"131\":1}}],[\"mapping\",{\"1\":{\"181\":1}}],[\"making\",{\"1\":{\"32\":1,\"166\":1}}],[\"makes\",{\"1\":{\"26\":1}}],[\"make\",{\"1\":{\"1\":3,\"4\":2,\"125\":1,\"150\":1,\"154\":1,\"159\":1,\"179\":1,\"188\":1}}],[\"may\",{\"1\":{\"28\":1}}],[\"maximum\",{\"1\":{\"28\":2,\"34\":1,\"45\":1,\"64\":1}}],[\"max\",{\"0\":{\"45\":1},\"1\":{\"26\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"42\":1,\"162\":1,\"164\":1,\"166\":1,\"167\":1,\"170\":1,\"172\":1}}],[\"manipulations\",{\"1\":{\"125\":1}}],[\"manager\",{\"0\":{\"126\":1},\"1\":{\"25\":1,\"39\":2,\"126\":3}}],[\"many\",{\"0\":{\"17\":1,\"134\":1},\"1\":{\"18\":1,\"135\":2}}],[\"manually\",{\"1\":{\"6\":1,\"126\":1,\"128\":1,\"129\":1}}],[\"made\",{\"1\":{\"9\":2,\"10\":1,\"25\":1,\"152\":2}}],[\"maturin\",{\"1\":{\"5\":3}}],[\"malware\",{\"1\":{\"4\":1}}],[\"main\",{\"1\":{\"1\":1,\"14\":1,\"16\":1,\"18\":1,\"20\":1,\"22\":1,\"24\":1,\"25\":1,\"26\":1,\"29\":1,\"30\":1,\"33\":1,\"36\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"67\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"84\":1,\"111\":1,\"113\":1,\"118\":1,\"120\":1,\"125\":4,\"126\":1,\"128\":1,\"129\":1,\"131\":1,\"133\":1,\"135\":1,\"137\":1,\"139\":1,\"141\":1,\"143\":1,\"144\":1,\"146\":1,\"148\":1,\"150\":1,\"153\":1,\"159\":1,\"162\":1,\"164\":1,\"166\":1,\"167\":2,\"170\":1,\"172\":3,\"174\":1,\"175\":1,\"177\":1,\"179\":1,\"180\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"190\":1,\"191\":1}}],[\"bool\",{\"1\":{\"187\":2}}],[\"bound\",{\"1\":{\"182\":1}}],[\"boba\",{\"1\":{\"18\":2,\"135\":1}}],[\"b\",{\"1\":{\"179\":1,\"180\":1}}],[\"blocked\",{\"1\":{\"167\":1}}],[\"blacksheep\",{\"0\":{\"163\":1},\"1\":{\"163\":2,\"164\":1}}],[\"break\",{\"1\":{\"155\":1}}],[\"banners\",{\"1\":{\"183\":3}}],[\"basecursorerror\",{\"0\":{\"103\":1}}],[\"baseconnectionerror\",{\"0\":{\"93\":1}}],[\"baseconnectionpoolerror\",{\"0\":{\"89\":1}}],[\"basetransactionerror\",{\"0\":{\"96\":1}}],[\"base\",{\"1\":{\"89\":1,\"93\":1,\"96\":1,\"103\":1}}],[\"based\",{\"1\":{\"81\":1}}],[\"bas\",{\"1\":{\"84\":1}}],[\"balancing\",{\"1\":{\"60\":1}}],[\"balance\",{\"0\":{\"60\":1},\"1\":{\"28\":1}}],[\"backward\",{\"0\":{\"79\":1,\"80\":1},\"1\":{\"79\":4,\"80\":2}}],[\"back\",{\"0\":{\"25\":1},\"1\":{\"25\":1}}],[\"biba\",{\"1\":{\"135\":1}}],[\"bigger\",{\"1\":{\"182\":1}}],[\"bigint\",{\"0\":{\"182\":1},\"1\":{\"181\":2,\"182\":3,\"187\":2,\"190\":1}}],[\"big\",{\"1\":{\"9\":1}}],[\"bin\",{\"1\":{\"5\":1}}],[\"built\",{\"1\":{\"5\":1,\"65\":1}}],[\"building\",{\"1\":{\"90\":1}}],[\"builder\",{\"0\":{\"42\":1},\"1\":{\"9\":1}}],[\"build\",{\"0\":{\"44\":1},\"1\":{\"5\":1,\"23\":1,\"42\":1,\"175\":1}}],[\"but\",{\"1\":{\"4\":1,\"5\":1,\"6\":1,\"42\":1,\"125\":2,\"126\":1,\"135\":1,\"154\":1,\"155\":1,\"182\":1}}],[\"began\",{\"1\":{\"126\":1}}],[\"begin\",{\"0\":{\"128\":1},\"1\":{\"97\":1,\"125\":3,\"126\":2,\"128\":1}}],[\"behavior\",{\"1\":{\"60\":1,\"81\":1,\"155\":1}}],[\"between\",{\"1\":{\"28\":1,\"63\":1}}],[\"better\",{\"1\":{\"4\":2,\"167\":1}}],[\"because\",{\"1\":{\"18\":1,\"167\":1,\"178\":1,\"182\":1}}],[\"before\",{\"1\":{\"14\":1,\"16\":1,\"18\":1,\"20\":1,\"22\":1,\"26\":1,\"28\":2,\"36\":1,\"38\":1,\"62\":1,\"64\":1,\"131\":1,\"133\":1,\"135\":1,\"137\":1,\"139\":1,\"141\":2,\"153\":1}}],[\"below\",{\"1\":{\"5\":1}}],[\"best\",{\"1\":{\"5\":2}}],[\"be\",{\"1\":{\"1\":1,\"4\":1,\"9\":3,\"10\":1,\"14\":1,\"18\":1,\"20\":1,\"22\":2,\"23\":1,\"26\":1,\"28\":8,\"36\":2,\"39\":1,\"54\":3,\"55\":3,\"56\":2,\"59\":1,\"64\":1,\"65\":1,\"71\":1,\"113\":1,\"120\":1,\"126\":1,\"131\":1,\"137\":1,\"139\":2,\"141\":3,\"152\":3,\"153\":1,\"154\":4,\"155\":1,\"167\":2,\"176\":2,\"177\":1,\"178\":1,\"179\":1,\"180\":3,\"185\":1,\"190\":1}}],[\"bytea\",{\"1\":{\"187\":1}}],[\"bytes\",{\"1\":{\"178\":1,\"179\":3,\"180\":4,\"187\":1}}],[\"by\",{\"1\":{\"1\":1,\"26\":1,\"54\":1,\"55\":1,\"56\":1,\"85\":1,\"141\":2,\"154\":1,\"155\":1,\"182\":1,\"187\":1}}],[\"numeric\",{\"1\":{\"187\":2}}],[\"numbers\",{\"1\":{\"182\":2}}],[\"number=10\",{\"1\":{\"76\":1,\"77\":1}}],[\"number=100\",{\"1\":{\"71\":1}}],[\"number=5\",{\"1\":{\"67\":1,\"150\":1}}],[\"number\",{\"1\":{\"14\":1,\"18\":1,\"28\":2,\"36\":1,\"54\":1,\"55\":1,\"56\":1,\"64\":1,\"66\":2,\"71\":2,\"76\":1,\"77\":1,\"131\":1,\"150\":2,\"182\":1}}],[\"null\",{\"1\":{\"187\":1}}],[\"nickname\",{\"1\":{\"179\":2,\"180\":4}}],[\"n\",{\"1\":{\"71\":2}}],[\"nats\",{\"1\":{\"166\":1}}],[\"nanosec\",{\"1\":{\"28\":8}}],[\"named\",{\"1\":{\"40\":1}}],[\"name=\",{\"1\":{\"29\":1}}],[\"names\",{\"1\":{\"28\":1}}],[\"name\",{\"0\":{\"51\":1},\"1\":{\"18\":1,\"28\":5,\"49\":1,\"51\":1,\"135\":1,\"141\":2,\"143\":2,\"146\":2,\"148\":2,\"159\":1,\"162\":1,\"164\":1,\"166\":1,\"167\":1,\"170\":1,\"172\":1,\"174\":1,\"175\":2,\"177\":2,\"178\":1,\"179\":1,\"180\":3,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"190\":2}}],[\"naming\",{\"1\":{\"16\":1,\"38\":1,\"133\":1}}],[\"no\",{\"1\":{\"25\":1,\"28\":3,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"86\":1}}],[\"none\",{\"1\":{\"14\":1,\"16\":1,\"18\":1,\"20\":1,\"22\":1,\"24\":1,\"25\":1,\"29\":1,\"30\":1,\"33\":1,\"36\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"66\":1,\"67\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"111\":1,\"113\":2,\"118\":1,\"120\":2,\"125\":4,\"126\":1,\"128\":1,\"129\":1,\"131\":1,\"133\":1,\"135\":1,\"137\":1,\"139\":1,\"141\":3,\"143\":1,\"144\":1,\"146\":1,\"148\":1,\"150\":1,\"159\":1,\"162\":2,\"164\":2,\"166\":2,\"167\":3,\"170\":3,\"172\":1,\"174\":1,\"175\":1,\"177\":1,\"179\":1,\"180\":3,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"187\":1,\"190\":1,\"191\":1}}],[\"noticeable\",{\"1\":{\"154\":1}}],[\"notes\",{\"0\":{\"155\":1}}],[\"note\",{\"1\":{\"28\":1,\"57\":1}}],[\"nothing\",{\"1\":{\"18\":1}}],[\"not\",{\"1\":{\"4\":1,\"14\":1,\"16\":1,\"18\":1,\"20\":1,\"22\":2,\"36\":1,\"38\":1,\"66\":1,\"85\":2,\"86\":1,\"131\":1,\"133\":1,\"135\":1,\"137\":1,\"139\":2,\"141\":1,\"150\":2,\"154\":2,\"159\":1,\"167\":1,\"170\":1,\"182\":1,\"191\":3,\"193\":1}}],[\"now\",{\"1\":{\"1\":1,\"125\":1,\"190\":1}}],[\"nested\",{\"1\":{\"184\":2}}],[\"network\",{\"1\":{\"166\":1}}],[\"next\",{\"0\":{\"72\":1},\"1\":{\"71\":1,\"72\":2,\"155\":1}}],[\"need\",{\"1\":{\"5\":2,\"7\":2,\"18\":1,\"20\":1,\"22\":1,\"25\":1,\"125\":3,\"126\":1,\"137\":1,\"139\":1,\"141\":1,\"155\":1,\"159\":1,\"166\":1,\"178\":1,\"182\":1,\"183\":2}}],[\"necessary\",{\"1\":{\"1\":1,\"5\":1}}],[\"new\",{\"1\":{\"1\":1,\"26\":2,\"32\":1,\"33\":2,\"44\":1,\"143\":1,\"146\":1,\"148\":1,\"150\":1,\"154\":2,\"159\":1,\"166\":1,\"182\":1,\"191\":1}}],[\"tuple\",{\"0\":{\"174\":1},\"1\":{\"141\":1,\"174\":5,\"175\":2}}],[\"typing\",{\"1\":{\"29\":1,\"30\":1,\"31\":1,\"154\":1,\"159\":1,\"162\":1,\"164\":1,\"166\":1,\"167\":1,\"170\":1,\"172\":1,\"176\":1,\"179\":1,\"180\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"190\":1,\"191\":1}}],[\"typically\",{\"1\":{\"28\":1}}],[\"types\",{\"0\":{\"181\":1,\"186\":1,\"192\":1,\"199\":1},\"1\":{\"111\":1,\"113\":1,\"115\":1,\"118\":1,\"120\":1,\"122\":1,\"154\":1,\"178\":2,\"179\":1,\"180\":2,\"181\":2,\"182\":2,\"183\":1,\"184\":1,\"185\":2,\"187\":2,\"188\":1,\"190\":3}}],[\"type\",{\"0\":{\"6\":1,\"178\":1,\"179\":1,\"180\":1,\"187\":1,\"188\":1,\"190\":1,\"191\":1},\"1\":{\"85\":2,\"86\":1,\"88\":1,\"154\":1,\"177\":1,\"179\":3,\"180\":2,\"181\":6,\"182\":4,\"183\":3,\"184\":5,\"185\":1,\"187\":4,\"188\":1,\"190\":3,\"191\":2}}],[\"trying\",{\"1\":{\"182\":1}}],[\"try\",{\"1\":{\"164\":1,\"172\":1}}],[\"traditional\",{\"1\":{\"141\":1}}],[\"transmitted\",{\"1\":{\"28\":1}}],[\"transactionclosederror\",{\"0\":{\"102\":1}}],[\"transactioncommiterror\",{\"0\":{\"98\":1}}],[\"transactionexecuteerror\",{\"0\":{\"101\":1}}],[\"transactionrollbackerror\",{\"0\":{\"99\":1}}],[\"transactionbeginerror\",{\"0\":{\"97\":1}}],[\"transactionsavepointerror\",{\"0\":{\"100\":1}}],[\"transactions\",{\"1\":{\"25\":1,\"123\":1}}],[\"transaction\",{\"0\":{\"23\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1},\"1\":{\"9\":3,\"18\":1,\"20\":1,\"23\":1,\"24\":4,\"36\":1,\"65\":1,\"67\":3,\"81\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"123\":2,\"124\":2,\"125\":11,\"126\":4,\"128\":2,\"129\":2,\"131\":4,\"133\":3,\"135\":3,\"137\":3,\"139\":3,\"141\":3,\"143\":3,\"144\":3,\"146\":5,\"148\":4,\"150\":4,\"152\":3,\"154\":1,\"155\":1,\"159\":1}}],[\"true\",{\"1\":{\"61\":1}}],[\"tried\",{\"1\":{\"28\":4,\"54\":1,\"55\":1}}],[\"tries\",{\"1\":{\"28\":1}}],[\"tcp\",{\"0\":{\"58\":1},\"1\":{\"28\":7,\"58\":2,\"61\":1,\"63\":2,\"64\":1}}],[\"take\",{\"1\":{\"166\":1,\"167\":2}}],[\"takes\",{\"1\":{\"4\":1}}],[\"table\",{\"1\":{\"159\":1,\"174\":1,\"175\":1,\"177\":1,\"179\":1,\"180\":1,\"182\":2,\"183\":1,\"184\":1,\"185\":1,\"189\":1,\"190\":4,\"191\":2}}],[\"target\",{\"0\":{\"59\":1},\"1\":{\"28\":4,\"176\":1}}],[\"title\",{\"1\":{\"183\":3}}],[\"tip\",{\"1\":{\"40\":1,\"126\":1}}],[\"tips\",{\"1\":{\"25\":1,\"159\":1,\"176\":1}}],[\"timeout=10\",{\"1\":{\"28\":1}}],[\"timeout\",{\"0\":{\"57\":1,\"58\":1},\"1\":{\"28\":10,\"57\":2,\"58\":2}}],[\"time\",{\"1\":{\"4\":2,\"26\":1,\"28\":3,\"36\":1,\"62\":1,\"63\":1,\"141\":1,\"187\":2}}],[\"timestamptz\",{\"1\":{\"187\":1}}],[\"timestamp\",{\"1\":{\"187\":1}}],[\"times\",{\"1\":{\"1\":1,\"54\":1,\"55\":1,\"56\":1,\"154\":1}}],[\"text\",{\"1\":{\"181\":1,\"183\":3,\"187\":1}}],[\"terms\",{\"1\":{\"125\":1}}],[\"testing\",{\"0\":{\"7\":1},\"1\":{\"7\":1}}],[\"test\",{\"1\":{\"4\":1,\"7\":2,\"179\":2,\"180\":2,\"189\":1}}],[\"tests\",{\"1\":{\"4\":1,\"7\":2}}],[\"telegram\",{\"1\":{\"3\":1,\"156\":1}}],[\"t\",{\"1\":{\"1\":1,\"7\":1,\"18\":1,\"25\":1,\"26\":2,\"42\":1,\"86\":1,\"125\":1,\"154\":2,\"166\":3,\"167\":2,\"170\":1,\"179\":2,\"180\":2,\"182\":1,\"183\":1,\"184\":1,\"187\":2}}],[\"too\",{\"1\":{\"125\":1}}],[\"together\",{\"1\":{\"4\":1}}],[\"tolerance\",{\"1\":{\"1\":1}}],[\"to\",{\"0\":{\"2\":1,\"25\":1,\"159\":1},\"1\":{\"1\":3,\"4\":2,\"5\":3,\"6\":1,\"7\":5,\"10\":1,\"18\":1,\"20\":1,\"22\":1,\"23\":1,\"25\":3,\"26\":3,\"28\":16,\"29\":2,\"34\":1,\"36\":1,\"40\":2,\"41\":1,\"42\":1,\"47\":1,\"50\":1,\"54\":2,\"55\":1,\"56\":1,\"57\":4,\"58\":2,\"59\":3,\"60\":1,\"61\":1,\"62\":1,\"68\":1,\"71\":1,\"81\":1,\"85\":2,\"86\":2,\"87\":1,\"88\":1,\"108\":1,\"125\":5,\"126\":2,\"135\":1,\"137\":1,\"139\":1,\"141\":5,\"146\":1,\"153\":1,\"154\":3,\"155\":2,\"158\":1,\"159\":3,\"161\":2,\"163\":2,\"166\":2,\"167\":1,\"169\":2,\"171\":2,\"176\":1,\"177\":3,\"178\":4,\"179\":1,\"180\":2,\"181\":3,\"182\":7,\"183\":3,\"184\":5,\"187\":1}}],[\"that\",{\"1\":{\"4\":1,\"23\":1,\"28\":4,\"57\":1,\"64\":1,\"85\":1,\"108\":1,\"125\":1,\"154\":3,\"159\":1,\"176\":1,\"179\":1,\"180\":1,\"184\":1}}],[\"than\",{\"1\":{\"1\":1,\"59\":1,\"182\":1}}],[\"these\",{\"1\":{\"125\":1,\"182\":2}}],[\"they\",{\"1\":{\"81\":1}}],[\"them\",{\"1\":{\"9\":1,\"81\":1,\"152\":1,\"159\":1}}],[\"then\",{\"1\":{\"5\":1,\"28\":1,\"126\":1}}],[\"there\",{\"1\":{\"4\":1,\"18\":1,\"25\":1,\"26\":1,\"29\":1,\"40\":1,\"54\":1,\"55\":1,\"56\":1,\"68\":1,\"86\":1,\"108\":1,\"123\":1,\"126\":1,\"154\":2,\"159\":1,\"161\":1,\"163\":1,\"165\":1,\"169\":1,\"171\":1,\"180\":1}}],[\"the\",{\"0\":{\"159\":1},\"1\":{\"1\":2,\"3\":1,\"4\":2,\"5\":2,\"9\":1,\"10\":1,\"14\":1,\"16\":3,\"18\":1,\"20\":2,\"22\":1,\"23\":1,\"24\":2,\"25\":2,\"26\":6,\"28\":27,\"29\":1,\"31\":1,\"32\":2,\"33\":1,\"34\":4,\"36\":2,\"38\":3,\"40\":3,\"41\":2,\"49\":1,\"50\":1,\"51\":2,\"52\":1,\"54\":2,\"55\":2,\"56\":3,\"57\":1,\"58\":2,\"59\":4,\"60\":1,\"61\":1,\"62\":3,\"63\":4,\"64\":2,\"65\":1,\"66\":1,\"67\":1,\"70\":1,\"71\":2,\"72\":1,\"74\":1,\"75\":1,\"78\":1,\"80\":1,\"86\":1,\"111\":1,\"113\":1,\"118\":1,\"120\":1,\"124\":2,\"125\":2,\"126\":1,\"131\":1,\"133\":3,\"135\":2,\"137\":2,\"139\":1,\"141\":8,\"143\":1,\"144\":1,\"146\":2,\"148\":1,\"150\":3,\"153\":3,\"154\":6,\"155\":2,\"156\":1,\"161\":2,\"163\":2,\"164\":1,\"165\":1,\"167\":5,\"169\":2,\"170\":2,\"171\":2,\"178\":1,\"179\":2,\"180\":11,\"181\":2,\"182\":3,\"183\":1,\"184\":2,\"185\":1,\"187\":1}}],[\"this\",{\"1\":{\"1\":1,\"4\":1,\"5\":1,\"14\":1,\"16\":1,\"18\":2,\"22\":1,\"25\":2,\"28\":7,\"32\":1,\"36\":1,\"38\":1,\"40\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"61\":1,\"62\":1,\"63\":2,\"64\":1,\"67\":1,\"85\":1,\"86\":2,\"125\":1,\"131\":1,\"133\":1,\"139\":1,\"154\":1,\"155\":1,\"166\":2,\"177\":1,\"178\":1,\"180\":1,\"182\":2,\"183\":2}}],[\"two\",{\"1\":{\"1\":1,\"29\":1,\"108\":1,\"123\":1}}],[\"i16\",{\"1\":{\"181\":1}}],[\"i32\",{\"1\":{\"181\":1}}],[\"i64\",{\"1\":{\"181\":1}}],[\"immediately\",{\"1\":{\"167\":1}}],[\"improve\",{\"1\":{\"141\":1}}],[\"impossible\",{\"1\":{\"87\":1,\"182\":1}}],[\"important\",{\"0\":{\"155\":1},\"1\":{\"26\":1,\"28\":1,\"126\":1,\"154\":1,\"179\":1,\"180\":1,\"182\":1,\"187\":1}}],[\"import\",{\"1\":{\"24\":1,\"29\":3,\"30\":3,\"31\":2,\"42\":1,\"67\":1,\"125\":1,\"126\":1,\"141\":2,\"159\":3,\"162\":4,\"164\":5,\"166\":6,\"167\":6,\"170\":5,\"172\":5,\"174\":1,\"175\":2,\"179\":3,\"180\":3,\"182\":3,\"183\":3,\"184\":3,\"185\":3,\"190\":3,\"191\":3}}],[\"ignored\",{\"1\":{\"28\":6,\"58\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1}}],[\"ignore=\",{\"1\":{\"7\":1}}],[\"ipv6address\",{\"1\":{\"187\":1}}],[\"ipv4address\",{\"1\":{\"187\":1}}],[\"ips\",{\"1\":{\"28\":1}}],[\"ip\",{\"1\":{\"28\":2,\"57\":1}}],[\"idea\",{\"1\":{\"167\":1}}],[\"idle\",{\"0\":{\"62\":1},\"1\":{\"28\":3,\"62\":1,\"166\":1}}],[\"id\",{\"1\":{\"14\":1,\"16\":1,\"20\":1,\"22\":1,\"36\":1,\"38\":1,\"118\":1,\"120\":1,\"125\":1,\"126\":1,\"131\":1,\"133\":1,\"137\":1,\"139\":1,\"141\":2,\"159\":2,\"175\":1,\"177\":1}}],[\"if\",{\"1\":{\"4\":1,\"7\":2,\"22\":1,\"25\":1,\"26\":1,\"28\":4,\"58\":1,\"62\":1,\"63\":1,\"64\":1,\"85\":2,\"86\":2,\"87\":1,\"88\":1,\"95\":1,\"102\":1,\"107\":1,\"125\":1,\"126\":2,\"135\":1,\"139\":1,\"154\":1,\"155\":1,\"162\":1,\"164\":2,\"166\":2,\"167\":2,\"170\":4,\"172\":1,\"179\":2,\"180\":2,\"182\":1,\"183\":1,\"184\":2,\"187\":1}}],[\"iteration\",{\"1\":{\"67\":1}}],[\"iterator\",{\"0\":{\"67\":1},\"1\":{\"66\":1,\"67\":1}}],[\"itself\",{\"1\":{\"1\":1,\"9\":1,\"152\":1}}],[\"it\",{\"1\":{\"1\":3,\"4\":1,\"5\":2,\"6\":1,\"7\":1,\"9\":1,\"10\":1,\"24\":3,\"25\":1,\"26\":3,\"28\":2,\"34\":1,\"36\":1,\"42\":1,\"56\":1,\"58\":2,\"65\":1,\"66\":1,\"71\":1,\"76\":2,\"77\":2,\"79\":2,\"85\":3,\"86\":1,\"87\":1,\"124\":3,\"125\":2,\"126\":1,\"141\":1,\"153\":1,\"154\":2,\"155\":2,\"159\":2,\"164\":2,\"166\":2,\"167\":4,\"170\":3,\"179\":3,\"180\":1,\"182\":2,\"183\":1,\"184\":2,\"185\":1,\"190\":2,\"191\":2}}],[\"inet\",{\"1\":{\"187\":2}}],[\"index\",{\"1\":{\"182\":2}}],[\"independent\",{\"1\":{\"141\":1}}],[\"inability\",{\"1\":{\"181\":1}}],[\"inactivity\",{\"1\":{\"28\":1}}],[\"inner\",{\"1\":{\"177\":2}}],[\"information\",{\"1\":{\"187\":1}}],[\"info\",{\"1\":{\"154\":1,\"184\":4,\"190\":3}}],[\"init\",{\"1\":{\"113\":1,\"120\":1}}],[\"initialize\",{\"0\":{\"29\":1,\"30\":1},\"1\":{\"126\":1,\"162\":1}}],[\"initializes\",{\"1\":{\"26\":1,\"153\":1}}],[\"initialization\",{\"1\":{\"9\":1,\"42\":1,\"71\":1}}],[\"introduction\",{\"0\":{\"195\":1}}],[\"integer\",{\"0\":{\"182\":1},\"1\":{\"181\":2,\"182\":5,\"187\":3,\"190\":1}}],[\"interpreted\",{\"1\":{\"54\":1}}],[\"interval\",{\"0\":{\"63\":1},\"1\":{\"28\":4,\"63\":2}}],[\"internally\",{\"1\":{\"18\":1}}],[\"interaction\",{\"1\":{\"1\":1,\"154\":1}}],[\"int\",{\"1\":{\"22\":1,\"139\":1,\"175\":1,\"177\":1,\"187\":5}}],[\"into\",{\"0\":{\"179\":1},\"1\":{\"18\":1,\"81\":1,\"87\":1,\"125\":1,\"126\":1,\"135\":1,\"141\":1,\"166\":1,\"178\":1,\"179\":4,\"182\":1,\"183\":3,\"184\":2,\"185\":1,\"190\":1,\"191\":2}}],[\"instead\",{\"1\":{\"174\":1,\"187\":1}}],[\"instance\",{\"1\":{\"120\":1,\"164\":1,\"176\":1}}],[\"instances\",{\"1\":{\"113\":1}}],[\"installation\",{\"0\":{\"158\":1},\"1\":{\"6\":1,\"158\":1}}],[\"installed\",{\"1\":{\"5\":1}}],[\"install\",{\"0\":{\"2\":1},\"1\":{\"5\":3,\"6\":2,\"158\":1}}],[\"insani7y\",{\"1\":{\"159\":1}}],[\"inside\",{\"1\":{\"108\":1}}],[\"inserted\",{\"1\":{\"125\":1}}],[\"insert\",{\"1\":{\"18\":1,\"125\":1,\"126\":1,\"135\":1,\"141\":1,\"179\":2,\"182\":3,\"183\":2,\"184\":2,\"185\":1,\"190\":2,\"191\":4}}],[\"inspired\",{\"1\":{\"1\":1,\"154\":1}}],[\"in\",{\"1\":{\"1\":1,\"3\":1,\"4\":2,\"5\":2,\"7\":2,\"9\":1,\"14\":1,\"18\":1,\"24\":3,\"25\":1,\"26\":1,\"28\":9,\"34\":1,\"36\":1,\"39\":1,\"54\":1,\"55\":1,\"56\":2,\"59\":1,\"65\":1,\"66\":3,\"67\":3,\"78\":1,\"80\":1,\"90\":1,\"91\":1,\"92\":1,\"94\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"104\":1,\"105\":1,\"106\":1,\"124\":3,\"125\":1,\"126\":1,\"141\":5,\"150\":3,\"152\":2,\"153\":1,\"154\":5,\"155\":2,\"156\":1,\"159\":1,\"164\":2,\"167\":2,\"170\":1,\"176\":1,\"177\":1,\"178\":2,\"179\":1,\"180\":3,\"182\":1,\"183\":1,\"184\":2,\"185\":1,\"190\":1,\"191\":1}}],[\"isn\",{\"1\":{\"187\":2}}],[\"isinstance\",{\"1\":{\"174\":1,\"175\":1,\"177\":1}}],[\"isolationlevel\",{\"1\":{\"24\":1}}],[\"isolation\",{\"1\":{\"24\":3,\"124\":2}}],[\"issue\",{\"1\":{\"4\":1}}],[\"is\",{\"0\":{\"1\":1,\"154\":1},\"1\":{\"1\":1,\"4\":1,\"5\":3,\"16\":1,\"18\":2,\"23\":1,\"24\":3,\"25\":1,\"26\":2,\"28\":14,\"29\":1,\"30\":1,\"38\":1,\"40\":2,\"46\":2,\"54\":1,\"56\":2,\"58\":3,\"61\":1,\"62\":3,\"63\":2,\"64\":2,\"66\":2,\"67\":1,\"85\":1,\"86\":1,\"95\":1,\"102\":1,\"107\":1,\"124\":3,\"125\":1,\"126\":3,\"133\":1,\"135\":1,\"141\":1,\"150\":2,\"153\":1,\"154\":2,\"159\":3,\"161\":1,\"163\":1,\"165\":1,\"166\":1,\"167\":1,\"169\":1,\"171\":1,\"182\":2,\"191\":2}}],[\"wrap\",{\"1\":{\"184\":1}}],[\"wrappers\",{\"1\":{\"182\":1}}],[\"wrong\",{\"1\":{\"179\":1}}],[\"writing\",{\"1\":{\"154\":1}}],[\"write\",{\"1\":{\"28\":2}}],[\"written\",{\"1\":{\"1\":1,\"154\":1}}],[\"won\",{\"1\":{\"25\":1,\"125\":1,\"154\":1,\"166\":1}}],[\"worry\",{\"1\":{\"18\":1}}],[\"working\",{\"1\":{\"154\":1}}],[\"workflow\",{\"1\":{\"141\":1}}],[\"work\",{\"1\":{\"10\":1,\"40\":1,\"68\":1,\"123\":1,\"178\":1,\"182\":1,\"183\":1}}],[\"wise\",{\"1\":{\"178\":1}}],[\"wisely\",{\"1\":{\"36\":1}}],[\"windows\",{\"1\":{\"63\":1}}],[\"will\",{\"1\":{\"20\":1,\"22\":2,\"26\":1,\"28\":7,\"54\":1,\"55\":1,\"57\":1,\"58\":1,\"64\":1,\"71\":1,\"125\":1,\"126\":1,\"137\":1,\"139\":2,\"141\":1,\"154\":3,\"155\":1,\"167\":2,\"177\":1,\"179\":2,\"184\":1,\"190\":3,\"191\":1}}],[\"within\",{\"1\":{\"10\":1}}],[\"without\",{\"1\":{\"6\":1,\"183\":1}}],[\"with\",{\"0\":{\"29\":1,\"30\":1,\"31\":1,\"126\":1},\"1\":{\"1\":1,\"4\":1,\"6\":1,\"7\":3,\"10\":2,\"14\":1,\"18\":1,\"28\":7,\"36\":2,\"39\":1,\"40\":1,\"42\":1,\"54\":1,\"67\":2,\"68\":1,\"71\":1,\"86\":1,\"108\":3,\"123\":1,\"125\":1,\"126\":2,\"131\":2,\"133\":1,\"135\":2,\"137\":1,\"139\":1,\"150\":1,\"154\":4,\"155\":1,\"158\":1,\"159\":1,\"161\":1,\"163\":1,\"166\":1,\"167\":1,\"169\":1,\"171\":1,\"176\":1,\"177\":1,\"178\":1,\"180\":1,\"181\":1,\"183\":1,\"184\":2,\"185\":1,\"188\":1,\"191\":1}}],[\"waiting\",{\"1\":{\"34\":2,\"141\":1}}],[\"warning\",{\"1\":{\"20\":1,\"22\":1,\"125\":1,\"137\":1,\"139\":1}}],[\"ways\",{\"1\":{\"5\":1,\"29\":1,\"123\":1}}],[\"way\",{\"1\":{\"5\":1,\"30\":1,\"36\":1,\"40\":1,\"42\":1,\"125\":1,\"159\":1,\"161\":1,\"163\":1,\"169\":1,\"171\":1,\"176\":1,\"178\":1}}],[\"want\",{\"1\":{\"4\":1,\"7\":1,\"135\":1,\"176\":2,\"179\":1,\"180\":1,\"182\":1,\"184\":2}}],[\"was\",{\"1\":{\"1\":1,\"154\":1}}],[\"which\",{\"1\":{\"25\":1,\"28\":2,\"56\":2,\"141\":1,\"150\":1,\"154\":1,\"167\":1,\"176\":1,\"177\":1,\"178\":1,\"180\":1}}],[\"where\",{\"1\":{\"14\":1,\"16\":1,\"20\":1,\"22\":1,\"28\":1,\"36\":1,\"38\":1,\"58\":1,\"67\":1,\"118\":1,\"120\":1,\"131\":1,\"133\":1,\"137\":1,\"139\":1,\"141\":2,\"150\":1,\"159\":1}}],[\"when\",{\"1\":{\"9\":1,\"28\":4,\"86\":1,\"152\":1,\"159\":1,\"166\":1,\"176\":1,\"180\":1,\"182\":1,\"183\":1,\"184\":1}}],[\"whole\",{\"1\":{\"144\":1}}],[\"who\",{\"1\":{\"4\":1,\"9\":1}}],[\"what\",{\"0\":{\"1\":1,\"154\":1},\"1\":{\"126\":1,\"159\":1,\"182\":1,\"190\":1}}],[\"weather\",{\"1\":{\"191\":10}}],[\"web\",{\"1\":{\"162\":8}}],[\"we\",{\"1\":{\"4\":2,\"6\":2,\"7\":1,\"9\":1,\"67\":1,\"81\":1,\"123\":1,\"125\":4,\"152\":1,\"154\":2,\"159\":1,\"161\":1,\"163\":1,\"169\":1,\"171\":1,\"173\":1,\"177\":1,\"178\":1,\"179\":3,\"180\":2,\"182\":2,\"183\":1,\"184\":1,\"185\":1,\"190\":2,\"191\":2}}],[\"f64\",{\"1\":{\"181\":1}}],[\"f32\",{\"1\":{\"181\":1}}],[\"float\",{\"1\":{\"187\":3}}],[\"float8\",{\"1\":{\"181\":1,\"182\":1,\"187\":1}}],[\"float64\",{\"0\":{\"182\":1},\"1\":{\"181\":1,\"182\":2,\"187\":1}}],[\"float4\",{\"1\":{\"181\":1,\"182\":1,\"187\":2}}],[\"float32\",{\"0\":{\"182\":1},\"1\":{\"181\":1,\"182\":2,\"187\":1}}],[\"func\",{\"1\":{\"167\":2}}],[\"function\",{\"0\":{\"31\":1},\"1\":{\"31\":1,\"176\":2,\"177\":2,\"180\":1}}],[\"future\",{\"1\":{\"164\":1,\"170\":1,\"172\":1}}],[\"full\",{\"1\":{\"28\":1,\"141\":1}}],[\"fully\",{\"0\":{\"125\":1},\"1\":{\"1\":1,\"154\":1}}],[\"field\",{\"1\":{\"63\":1,\"180\":2,\"184\":7}}],[\"finish\",{\"1\":{\"141\":1}}],[\"fine\",{\"1\":{\"125\":1}}],[\"finally\",{\"1\":{\"172\":1}}],[\"final\",{\"1\":{\"29\":2,\"30\":2,\"31\":2,\"125\":1,\"126\":1,\"159\":4,\"179\":2,\"180\":2,\"182\":2,\"183\":2,\"184\":2,\"185\":2,\"190\":2,\"191\":2}}],[\"find\",{\"1\":{\"5\":1,\"187\":1}}],[\"file\",{\"0\":{\"53\":1},\"1\":{\"7\":2,\"28\":2,\"53\":1,\"172\":1}}],[\"first\",{\"0\":{\"74\":1,\"159\":1},\"1\":{\"4\":1,\"5\":1,\"20\":1,\"29\":1,\"74\":2,\"125\":3,\"137\":1,\"159\":1}}],[\"found\",{\"1\":{\"193\":1}}],[\"following\",{\"1\":{\"161\":1,\"163\":1,\"169\":1,\"171\":1}}],[\"follow\",{\"1\":{\"5\":1}}],[\"forward\",{\"0\":{\"78\":1},\"1\":{\"78\":2}}],[\"forcibly\",{\"1\":{\"28\":1}}],[\"for\",{\"1\":{\"1\":1,\"4\":3,\"7\":1,\"9\":2,\"14\":1,\"16\":2,\"18\":1,\"20\":1,\"22\":1,\"26\":1,\"28\":6,\"32\":1,\"36\":1,\"38\":2,\"39\":1,\"48\":1,\"49\":1,\"53\":1,\"56\":1,\"58\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"66\":2,\"67\":1,\"81\":2,\"84\":1,\"86\":1,\"89\":1,\"90\":1,\"93\":1,\"96\":1,\"103\":1,\"108\":2,\"111\":1,\"113\":1,\"115\":1,\"118\":1,\"120\":1,\"122\":1,\"131\":1,\"133\":2,\"135\":2,\"137\":1,\"139\":1,\"141\":1,\"150\":2,\"154\":2,\"161\":1,\"163\":1,\"165\":1,\"166\":1,\"167\":1,\"169\":1,\"171\":1,\"173\":1,\"178\":1,\"179\":4,\"180\":4,\"182\":1,\"184\":5,\"187\":1}}],[\"frameworks\",{\"0\":{\"197\":1}}],[\"framework\",{\"0\":{\"168\":1},\"1\":{\"161\":2,\"163\":2,\"165\":1,\"169\":2,\"171\":2}}],[\"front\",{\"1\":{\"141\":1}}],[\"from\",{\"0\":{\"180\":1},\"1\":{\"3\":1,\"4\":1,\"9\":5,\"14\":2,\"16\":1,\"20\":2,\"22\":1,\"24\":1,\"25\":1,\"28\":1,\"29\":2,\"30\":2,\"31\":2,\"34\":1,\"36\":3,\"38\":1,\"40\":1,\"42\":2,\"44\":1,\"65\":1,\"67\":2,\"71\":2,\"72\":1,\"111\":1,\"113\":2,\"118\":1,\"120\":2,\"125\":2,\"126\":1,\"131\":2,\"133\":1,\"137\":2,\"139\":1,\"141\":4,\"150\":2,\"152\":4,\"156\":1,\"158\":1,\"159\":4,\"162\":4,\"164\":5,\"166\":7,\"167\":8,\"170\":5,\"172\":5,\"174\":2,\"175\":4,\"176\":2,\"177\":2,\"179\":4,\"180\":8,\"181\":2,\"182\":4,\"183\":4,\"184\":3,\"185\":3,\"190\":4,\"191\":4}}],[\"frustrated\",{\"1\":{\"4\":1}}],[\"feature\",{\"1\":{\"160\":1,\"168\":1,\"192\":1}}],[\"fetched\",{\"1\":{\"67\":2,\"150\":2}}],[\"fetch\",{\"0\":{\"15\":1,\"19\":1,\"21\":1,\"37\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"132\":1,\"136\":1,\"138\":1},\"1\":{\"16\":1,\"20\":2,\"22\":1,\"38\":1,\"66\":3,\"67\":2,\"71\":6,\"72\":2,\"73\":2,\"74\":2,\"75\":2,\"76\":2,\"77\":2,\"78\":2,\"79\":1,\"80\":2,\"106\":2,\"118\":1,\"120\":1,\"133\":1,\"137\":2,\"139\":1,\"150\":3}}],[\"feel\",{\"1\":{\"4\":1}}],[\"fellas\",{\"1\":{\"4\":1}}],[\"factories\",{\"0\":{\"173\":1,\"176\":1,\"198\":1},\"1\":{\"173\":1,\"174\":1,\"175\":1}}],[\"factory=to\",{\"1\":{\"177\":1}}],[\"factory=tuple\",{\"1\":{\"174\":1}}],[\"factory=class\",{\"1\":{\"175\":1}}],[\"factory\",{\"0\":{\"114\":1,\"121\":1},\"1\":{\"115\":1,\"122\":1,\"174\":1,\"175\":1,\"176\":3,\"177\":1}}],[\"fail\",{\"1\":{\"126\":1}}],[\"fault\",{\"1\":{\"1\":1}}],[\"fastapi\",{\"0\":{\"165\":1},\"1\":{\"165\":1,\"166\":5,\"167\":5}}],[\"faster\",{\"1\":{\"1\":1,\"154\":1}}],[\"fast\",{\"1\":{\"1\":1,\"173\":1}}],[\"date\",{\"1\":{\"187\":2}}],[\"datetime\",{\"1\":{\"187\":6}}],[\"dataclass\",{\"1\":{\"175\":2,\"177\":1}}],[\"dataclasses\",{\"1\":{\"175\":1}}],[\"data=dict\",{\"1\":{\"162\":1}}],[\"data\",{\"1\":{\"28\":1,\"85\":1,\"108\":1,\"141\":2,\"152\":1,\"180\":2,\"182\":1,\"184\":1,\"190\":1,\"191\":2}}],[\"database\",{\"0\":{\"159\":1},\"1\":{\"1\":1,\"9\":5,\"10\":1,\"28\":1,\"29\":1,\"42\":1,\"49\":1,\"59\":1,\"85\":1,\"152\":3,\"154\":1,\"159\":1,\"162\":2,\"164\":2,\"166\":2,\"167\":1,\"170\":1,\"175\":1,\"176\":1,\"177\":1,\"179\":3,\"180\":3,\"182\":4,\"183\":3,\"184\":3,\"185\":3}}],[\"due\",{\"1\":{\"178\":1,\"181\":1}}],[\"dns\",{\"1\":{\"28\":1}}],[\"dsn=\",{\"1\":{\"30\":1,\"31\":1,\"125\":1,\"126\":1,\"162\":1,\"164\":1,\"166\":1,\"167\":1,\"170\":1,\"172\":1}}],[\"dsns\",{\"1\":{\"28\":1}}],[\"dsn\",{\"0\":{\"30\":1},\"1\":{\"28\":3,\"30\":1}}],[\"db\",{\"1\":{\"14\":1,\"16\":1,\"18\":1,\"20\":1,\"22\":1,\"24\":1,\"25\":1,\"26\":1,\"28\":3,\"29\":3,\"30\":2,\"31\":2,\"33\":1,\"36\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"67\":2,\"111\":2,\"113\":2,\"118\":3,\"120\":2,\"125\":3,\"126\":3,\"131\":1,\"133\":1,\"135\":1,\"137\":1,\"139\":1,\"141\":3,\"148\":1,\"159\":3,\"162\":13,\"164\":7,\"166\":10,\"167\":8,\"170\":16,\"172\":4,\"179\":3,\"180\":3,\"182\":3,\"183\":4,\"184\":4,\"185\":3,\"190\":2,\"191\":4}}],[\"dbname\",{\"0\":{\"49\":1},\"1\":{\"7\":2,\"42\":1}}],[\"difficult\",{\"1\":{\"178\":1}}],[\"different\",{\"1\":{\"81\":2,\"135\":1,\"176\":1,\"184\":1}}],[\"difference\",{\"1\":{\"42\":1}}],[\"directory\",{\"1\":{\"54\":1}}],[\"directly\",{\"1\":{\"14\":1,\"36\":1,\"131\":1,\"158\":1,\"191\":1}}],[\"discard\",{\"1\":{\"125\":1}}],[\"discussions\",{\"1\":{\"4\":1}}],[\"disabled\",{\"1\":{\"62\":1,\"63\":1,\"64\":1}}],[\"disable\",{\"1\":{\"28\":2,\"60\":1,\"155\":1}}],[\"dictionary\",{\"1\":{\"176\":1,\"184\":1}}],[\"dicts\",{\"1\":{\"111\":1,\"184\":1}}],[\"dict\",{\"1\":{\"14\":2,\"16\":2,\"20\":2,\"36\":2,\"38\":2,\"67\":2,\"111\":1,\"118\":2,\"131\":2,\"133\":2,\"137\":2,\"150\":2,\"159\":2,\"162\":1,\"164\":1,\"170\":1,\"172\":1,\"174\":1,\"176\":1,\"177\":2,\"180\":3,\"184\":6,\"187\":3,\"190\":1}}],[\"device\",{\"1\":{\"185\":4}}],[\"devices\",{\"1\":{\"185\":2}}],[\"developers\",{\"1\":{\"178\":1}}],[\"development\",{\"1\":{\"152\":1}}],[\"develop\",{\"1\":{\"5\":1}}],[\"deal\",{\"1\":{\"180\":1}}],[\"demonstration\",{\"1\":{\"179\":1,\"180\":1}}],[\"demand\",{\"1\":{\"26\":1}}],[\"depends\",{\"1\":{\"166\":2,\"167\":2}}],[\"dependency\",{\"0\":{\"82\":1}}],[\"details\",{\"1\":{\"160\":1,\"168\":1,\"192\":1}}],[\"decimal\",{\"1\":{\"187\":3}}],[\"decoder\",{\"1\":{\"180\":2}}],[\"decoders=\",{\"1\":{\"180\":1}}],[\"decoders\",{\"1\":{\"111\":2,\"113\":2,\"115\":2,\"118\":2,\"120\":2,\"122\":2,\"180\":2}}],[\"decode\",{\"0\":{\"180\":1},\"1\":{\"178\":1,\"180\":2}}],[\"declare\",{\"1\":{\"69\":1,\"104\":1}}],[\"define\",{\"1\":{\"81\":1}}],[\"deferrable=true\",{\"1\":{\"24\":1}}],[\"deferrable\",{\"1\":{\"24\":2,\"124\":2}}],[\"def\",{\"1\":{\"14\":1,\"16\":1,\"18\":1,\"20\":1,\"22\":1,\"24\":1,\"25\":1,\"29\":1,\"30\":1,\"33\":1,\"36\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"67\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"111\":1,\"113\":2,\"118\":1,\"120\":2,\"125\":4,\"126\":1,\"128\":1,\"129\":1,\"131\":1,\"133\":1,\"135\":1,\"137\":1,\"139\":1,\"141\":1,\"143\":1,\"144\":1,\"146\":1,\"148\":1,\"150\":1,\"159\":1,\"162\":3,\"164\":3,\"166\":3,\"167\":3,\"170\":3,\"172\":2,\"174\":1,\"175\":1,\"177\":3,\"179\":1,\"180\":2,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"190\":1,\"191\":1}}],[\"defaults\",{\"1\":{\"28\":4,\"57\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1}}],[\"default\",{\"1\":{\"7\":1,\"24\":3,\"28\":2,\"56\":1,\"58\":2,\"66\":4,\"124\":3,\"141\":1,\"150\":3,\"155\":1,\"159\":1,\"161\":1,\"163\":1,\"165\":1,\"169\":1,\"171\":1,\"179\":1,\"180\":1,\"182\":1,\"183\":1,\"184\":2,\"185\":1,\"190\":1,\"191\":1}}],[\"description\",{\"0\":{\"192\":1},\"1\":{\"4\":1,\"183\":5}}],[\"dropping\",{\"1\":{\"28\":1,\"32\":1,\"64\":1}}],[\"draft\",{\"1\":{\"4\":1}}],[\"drivers\",{\"1\":{\"1\":1}}],[\"driver\",{\"1\":{\"1\":1,\"108\":1,\"152\":1,\"154\":1}}],[\"down\",{\"1\":{\"159\":1}}],[\"docs\",{\"1\":{\"65\":1,\"143\":1,\"144\":1,\"146\":1,\"148\":1,\"150\":1,\"155\":1}}],[\"docstrings\",{\"1\":{\"154\":1}}],[\"docstring\",{\"1\":{\"42\":1}}],[\"documentation\",{\"0\":{\"0\":1},\"1\":{\"5\":1,\"154\":1,\"155\":1}}],[\"domain\",{\"1\":{\"28\":1,\"54\":1,\"58\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1}}],[\"doesn\",{\"1\":{\"26\":1,\"42\":1,\"170\":1,\"179\":1,\"180\":1}}],[\"do\",{\"1\":{\"4\":1,\"5\":1,\"25\":1,\"67\":1,\"150\":1,\"155\":1,\"159\":1,\"183\":1}}],[\"don\",{\"1\":{\"1\":1,\"7\":1,\"18\":1,\"86\":1,\"154\":1,\"166\":2,\"167\":2,\"179\":1,\"180\":1,\"183\":1,\"184\":1}}],[\"plus\",{\"1\":{\"191\":4}}],[\"please\",{\"1\":{\"4\":2}}],[\"pg\",{\"1\":{\"162\":2,\"164\":1,\"166\":1,\"167\":1,\"170\":2,\"172\":1}}],[\"pgbouncer\",{\"1\":{\"155\":1,\"166\":1,\"167\":1}}],[\"perfect\",{\"1\":{\"166\":1}}],[\"performance\",{\"1\":{\"141\":1}}],[\"people\",{\"1\":{\"9\":1,\"16\":1,\"38\":1,\"133\":1}}],[\"pull\",{\"1\":{\"159\":1}}],[\"pulls\",{\"1\":{\"36\":1,\"159\":1}}],[\"publish\",{\"1\":{\"4\":1}}],[\"pymacaddr8\",{\"0\":{\"185\":1},\"1\":{\"181\":1,\"185\":3,\"187\":1}}],[\"pymacaddr6\",{\"0\":{\"185\":1},\"1\":{\"181\":1,\"185\":3,\"187\":1}}],[\"pyjsonb\",{\"0\":{\"184\":1},\"1\":{\"181\":1,\"184\":4,\"187\":1}}],[\"pyjson\",{\"0\":{\"184\":1},\"1\":{\"181\":1,\"184\":4,\"187\":1}}],[\"pyvarchar\",{\"0\":{\"183\":1},\"1\":{\"181\":1,\"183\":1,\"187\":1}}],[\"pycustomtype\",{\"1\":{\"179\":5,\"180\":2}}],[\"pydantic\",{\"1\":{\"113\":1,\"120\":1}}],[\"py\",{\"1\":{\"7\":1,\"87\":1}}],[\"pytext\",{\"0\":{\"183\":1},\"1\":{\"181\":1,\"183\":4,\"187\":1}}],[\"pytest\",{\"1\":{\"7\":3}}],[\"pytorustvaluemappingerror\",{\"0\":{\"86\":1}}],[\"python3\",{\"1\":{\"5\":1}}],[\"python\",{\"1\":{\"1\":1,\"5\":2,\"7\":1,\"42\":1,\"85\":1,\"86\":1,\"108\":1,\"113\":1,\"120\":1,\"154\":2,\"178\":1,\"181\":2,\"182\":2,\"183\":2,\"184\":2,\"187\":1,\"191\":1}}],[\"poetry\",{\"1\":{\"158\":1}}],[\"pooling\",{\"1\":{\"155\":2}}],[\"pool\",{\"0\":{\"25\":1,\"26\":1,\"27\":1,\"29\":1,\"30\":1,\"31\":1,\"42\":1,\"45\":1,\"153\":1},\"1\":{\"14\":1,\"16\":1,\"18\":1,\"20\":1,\"22\":1,\"24\":1,\"25\":3,\"26\":5,\"28\":2,\"29\":2,\"30\":2,\"31\":2,\"32\":2,\"33\":2,\"34\":5,\"36\":3,\"38\":1,\"39\":1,\"40\":1,\"41\":2,\"42\":2,\"45\":1,\"67\":2,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"111\":2,\"113\":2,\"118\":3,\"120\":2,\"125\":3,\"126\":3,\"131\":1,\"133\":1,\"135\":1,\"137\":1,\"139\":1,\"141\":3,\"148\":1,\"152\":2,\"153\":2,\"159\":3,\"162\":17,\"164\":10,\"166\":10,\"167\":11,\"170\":19,\"172\":5,\"174\":1,\"175\":1,\"177\":1,\"179\":3,\"180\":3,\"182\":3,\"183\":4,\"184\":4,\"185\":3,\"190\":2,\"191\":4}}],[\"port=8000\",{\"1\":{\"172\":1}}],[\"port=5432\",{\"1\":{\"29\":1}}],[\"ports\",{\"1\":{\"28\":3,\"56\":3}}],[\"port\",{\"0\":{\"56\":1},\"1\":{\"7\":2,\"28\":3,\"42\":1,\"56\":2}}],[\"postgesql\",{\"1\":{\"154\":1}}],[\"postgres\",{\"1\":{\"7\":8,\"28\":4,\"29\":3,\"30\":4,\"31\":4,\"125\":4,\"126\":4,\"162\":4,\"164\":4,\"166\":4,\"167\":4,\"170\":4,\"172\":4}}],[\"postgresql\",{\"0\":{\"179\":1,\"180\":1},\"1\":{\"1\":2,\"7\":4,\"10\":1,\"24\":3,\"28\":12,\"40\":1,\"47\":1,\"48\":1,\"49\":1,\"65\":2,\"66\":1,\"123\":1,\"124\":3,\"125\":1,\"143\":1,\"144\":1,\"146\":1,\"148\":1,\"150\":3,\"154\":2,\"155\":1,\"178\":2,\"179\":2,\"180\":1,\"181\":2,\"183\":2,\"184\":1,\"187\":2,\"190\":1,\"191\":1}}],[\"possible\",{\"1\":{\"1\":1,\"28\":1,\"34\":1,\"71\":1,\"85\":1,\"86\":1,\"178\":1}}],[\"parsed\",{\"1\":{\"180\":1}}],[\"parts\",{\"1\":{\"155\":1,\"167\":1}}],[\"parameter\",{\"1\":{\"14\":1,\"18\":1,\"28\":2,\"36\":1,\"51\":1,\"71\":1,\"76\":1,\"77\":1,\"79\":1,\"131\":1,\"176\":1,\"177\":1,\"180\":2}}],[\"parameters=\",{\"1\":{\"67\":1,\"131\":1,\"133\":1,\"150\":1,\"191\":2}}],[\"parameters\",{\"0\":{\"14\":1,\"16\":1,\"18\":1,\"20\":1,\"22\":1,\"24\":1,\"28\":1,\"29\":1,\"33\":1,\"36\":1,\"38\":1,\"66\":1,\"111\":1,\"113\":1,\"115\":1,\"118\":1,\"120\":1,\"122\":1,\"124\":1,\"131\":1,\"133\":1,\"135\":1,\"137\":1,\"139\":1,\"141\":1,\"143\":1,\"146\":1,\"148\":1,\"150\":1},\"1\":{\"14\":3,\"16\":2,\"18\":3,\"20\":2,\"22\":2,\"28\":1,\"29\":1,\"31\":1,\"34\":1,\"36\":4,\"38\":2,\"66\":2,\"86\":2,\"131\":3,\"133\":2,\"135\":3,\"137\":2,\"139\":2,\"150\":2,\"159\":1,\"179\":2,\"180\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"190\":1,\"191\":1}}],[\"packet\",{\"1\":{\"62\":1}}],[\"pass\",{\"0\":{\"179\":1},\"1\":{\"179\":1,\"182\":1,\"183\":2,\"191\":1}}],[\"passed\",{\"1\":{\"36\":1,\"113\":2,\"120\":2,\"179\":1,\"181\":1,\"182\":1,\"184\":1}}],[\"password=\",{\"1\":{\"29\":1}}],[\"password\",{\"0\":{\"48\":1},\"1\":{\"7\":2,\"28\":4,\"42\":1,\"48\":1}}],[\"path\",{\"1\":{\"7\":1,\"28\":1,\"54\":1}}],[\"page\",{\"1\":{\"4\":1}}],[\"pipelining\",{\"1\":{\"141\":2}}],[\"pipelined\",{\"1\":{\"141\":1}}],[\"pipeline\",{\"0\":{\"140\":1},\"1\":{\"141\":2}}],[\"pip\",{\"1\":{\"5\":2,\"158\":2}}],[\"print\",{\"1\":{\"190\":1,\"191\":1}}],[\"prior\",{\"0\":{\"73\":1},\"1\":{\"73\":1}}],[\"primary\",{\"1\":{\"59\":1}}],[\"predefined\",{\"0\":{\"173\":1},\"1\":{\"173\":1}}],[\"preparation\",{\"1\":{\"155\":1}}],[\"prepared\",{\"1\":{\"14\":1,\"16\":1,\"18\":1,\"20\":1,\"22\":1,\"36\":1,\"38\":1,\"131\":1,\"133\":1,\"135\":1,\"137\":1,\"139\":1,\"141\":4,\"150\":1,\"155\":1}}],[\"prepare\",{\"1\":{\"4\":1,\"5\":1,\"14\":1,\"16\":1,\"18\":1,\"20\":1,\"22\":1,\"36\":1,\"38\":1,\"131\":1,\"133\":1,\"135\":1,\"137\":1,\"139\":1,\"141\":1,\"150\":1}}],[\"preferable\",{\"1\":{\"16\":1,\"36\":1,\"38\":1,\"40\":1,\"133\":1}}],[\"prefer\",{\"1\":{\"9\":1}}],[\"pre\",{\"1\":{\"6\":3}}],[\"previous\",{\"1\":{\"5\":1,\"73\":1,\"126\":1,\"141\":1,\"167\":1}}],[\"pr\",{\"1\":{\"4\":2}}],[\"provide\",{\"1\":{\"154\":1}}],[\"provided\",{\"1\":{\"18\":1,\"28\":1}}],[\"profiles\",{\"1\":{\"141\":1}}],[\"processing\",{\"1\":{\"177\":1}}],[\"process\",{\"1\":{\"141\":6,\"176\":1}}],[\"production\",{\"1\":{\"36\":1,\"159\":1}}],[\"probes\",{\"1\":{\"28\":2,\"63\":1,\"64\":1}}],[\"problem\",{\"1\":{\"4\":1}}],[\"project\",{\"1\":{\"1\":1,\"5\":3}}],[\"psql\",{\"1\":{\"174\":1,\"175\":1,\"177\":1,\"180\":3}}],[\"psqlpy\",{\"0\":{\"0\":1,\"1\":1,\"154\":1},\"1\":{\"1\":2,\"3\":1,\"4\":1,\"5\":1,\"7\":1,\"24\":1,\"29\":1,\"30\":1,\"31\":1,\"42\":4,\"67\":1,\"123\":1,\"125\":1,\"126\":1,\"141\":2,\"154\":2,\"156\":1,\"158\":1,\"159\":1,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"166\":1,\"167\":1,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"174\":1,\"175\":1,\"179\":4,\"180\":3,\"181\":2,\"182\":2,\"183\":3,\"184\":3,\"185\":2,\"187\":3,\"190\":3,\"191\":1}}],[\"psycopg3\",{\"1\":{\"1\":1,\"154\":1}}],[\"arr\",{\"1\":{\"189\":1}}],[\"arrays\",{\"1\":{\"188\":1}}],[\"array\",{\"0\":{\"188\":1},\"1\":{\"184\":2,\"189\":1}}],[\"aren\",{\"1\":{\"26\":1}}],[\"are\",{\"1\":{\"4\":1,\"25\":1,\"29\":1,\"68\":1,\"81\":1,\"86\":1,\"108\":2,\"123\":1,\"125\":3,\"154\":1,\"155\":1,\"158\":1,\"179\":1,\"180\":1,\"182\":2}}],[\"advanced\",{\"0\":{\"167\":1,\"178\":1},\"1\":{\"178\":1}}],[\"additional\",{\"1\":{\"181\":1,\"184\":4}}],[\"address\",{\"1\":{\"28\":1,\"57\":1,\"187\":2}}],[\"addresses\",{\"1\":{\"28\":5,\"57\":1,\"185\":1}}],[\"add\",{\"1\":{\"4\":1,\"54\":1,\"55\":1,\"56\":1,\"162\":1,\"164\":1}}],[\"aiohttp\",{\"0\":{\"161\":1},\"1\":{\"161\":2,\"162\":1}}],[\"awesome\",{\"1\":{\"154\":1}}],[\"await\",{\"1\":{\"14\":2,\"16\":2,\"18\":2,\"20\":2,\"22\":2,\"24\":1,\"25\":1,\"36\":1,\"38\":1,\"40\":1,\"67\":2,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"111\":2,\"113\":2,\"118\":2,\"120\":2,\"125\":5,\"126\":3,\"128\":1,\"129\":1,\"131\":2,\"133\":2,\"135\":2,\"137\":2,\"139\":2,\"141\":3,\"143\":3,\"144\":2,\"146\":3,\"148\":3,\"150\":2,\"159\":1,\"162\":3,\"164\":2,\"166\":2,\"167\":3,\"170\":2,\"172\":3,\"174\":1,\"175\":1,\"177\":1,\"179\":1,\"180\":1,\"182\":1,\"183\":2,\"184\":2,\"185\":1,\"190\":1,\"191\":3}}],[\"automatically\",{\"1\":{\"125\":1,\"126\":3}}],[\"amount\",{\"1\":{\"62\":1}}],[\"accurately\",{\"1\":{\"181\":1}}],[\"accepts\",{\"1\":{\"176\":1,\"179\":1}}],[\"acceleration\",{\"1\":{\"154\":2}}],[\"account\",{\"1\":{\"166\":1}}],[\"acquire\",{\"0\":{\"39\":1},\"1\":{\"39\":1}}],[\"activate\",{\"1\":{\"5\":1}}],[\"at\",{\"1\":{\"41\":1,\"167\":1}}],[\"attempts\",{\"1\":{\"57\":1}}],[\"attempt\",{\"1\":{\"28\":2}}],[\"attrs\",{\"0\":{\"59\":1},\"1\":{\"28\":2}}],[\"attrs=read\",{\"1\":{\"28\":2}}],[\"atomicity\",{\"1\":{\"18\":1}}],[\"available\",{\"0\":{\"28\":1},\"1\":{\"28\":2,\"34\":2,\"42\":1,\"58\":1,\"181\":1}}],[\"age\",{\"1\":{\"18\":1,\"135\":1,\"190\":2}}],[\"alias\",{\"1\":{\"180\":1}}],[\"aliases\",{\"1\":{\"180\":1}}],[\"aleksandr\",{\"1\":{\"159\":1}}],[\"alex\",{\"1\":{\"14\":1,\"16\":1,\"36\":1,\"38\":1,\"125\":1,\"126\":1,\"131\":1,\"133\":1,\"190\":2}}],[\"already\",{\"1\":{\"126\":1}}],[\"alternatively\",{\"1\":{\"183\":1}}],[\"alternative\",{\"1\":{\"125\":1}}],[\"also\",{\"1\":{\"28\":1,\"182\":1}}],[\"allows\",{\"1\":{\"42\":1,\"141\":1}}],[\"all\",{\"0\":{\"28\":1,\"78\":1,\"80\":1},\"1\":{\"1\":1,\"4\":1,\"5\":1,\"6\":2,\"25\":2,\"42\":1,\"56\":1,\"78\":2,\"80\":2,\"84\":1,\"89\":1,\"96\":1,\"125\":2,\"141\":1,\"155\":1,\"178\":1,\"181\":1,\"187\":1}}],[\"after\",{\"1\":{\"5\":2,\"28\":1,\"36\":1,\"125\":2,\"141\":1,\"158\":1}}],[\"append\",{\"1\":{\"162\":1}}],[\"app\",{\"1\":{\"162\":6,\"164\":9,\"166\":6,\"167\":5,\"170\":10,\"172\":3}}],[\"apply\",{\"1\":{\"57\":1,\"180\":1}}],[\"applied\",{\"1\":{\"28\":2,\"57\":1}}],[\"application\",{\"0\":{\"51\":1},\"1\":{\"28\":2,\"41\":1,\"51\":1,\"154\":1,\"155\":1,\"159\":1,\"162\":7,\"164\":5,\"167\":1,\"170\":1}}],[\"applications\",{\"1\":{\"1\":1}}],[\"approved\",{\"1\":{\"4\":1}}],[\"annotated\",{\"1\":{\"166\":2,\"167\":1}}],[\"annotations\",{\"1\":{\"164\":1,\"170\":1,\"172\":1}}],[\"anything\",{\"1\":{\"25\":1,\"176\":1}}],[\"any\",{\"1\":{\"14\":2,\"16\":1,\"20\":2,\"26\":1,\"36\":2,\"38\":1,\"42\":1,\"59\":1,\"67\":2,\"106\":1,\"111\":1,\"118\":1,\"131\":2,\"133\":1,\"137\":2,\"141\":1,\"150\":2,\"153\":1,\"154\":2,\"159\":2,\"164\":3,\"170\":3,\"172\":3,\"176\":1,\"177\":2,\"180\":2,\"183\":1,\"188\":1}}],[\"an\",{\"1\":{\"4\":1,\"20\":1,\"22\":2,\"125\":1,\"126\":1,\"137\":1,\"139\":2,\"154\":1,\"155\":1,\"167\":1,\"178\":1,\"179\":1,\"184\":1}}],[\"andr\",{\"1\":{\"159\":1}}],[\"and\",{\"0\":{\"6\":1},\"1\":{\"1\":4,\"3\":1,\"4\":1,\"5\":1,\"7\":2,\"9\":1,\"14\":1,\"16\":1,\"25\":1,\"26\":1,\"28\":7,\"32\":1,\"36\":1,\"38\":1,\"54\":1,\"55\":1,\"57\":1,\"58\":1,\"66\":1,\"81\":1,\"125\":2,\"131\":1,\"133\":1,\"152\":1,\"153\":1,\"154\":1,\"159\":1,\"164\":1,\"166\":3,\"167\":2,\"170\":1,\"176\":2,\"177\":2,\"178\":1,\"179\":2,\"180\":2,\"181\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"191\":3}}],[\"absolute\",{\"0\":{\"76\":1},\"1\":{\"76\":4,\"77\":1}}],[\"abstractions\",{\"1\":{\"1\":1,\"154\":1}}],[\"about\",{\"1\":{\"18\":1,\"155\":1,\"180\":1}}],[\"above\",{\"1\":{\"1\":1,\"184\":1}}],[\"assert\",{\"1\":{\"174\":1,\"175\":1,\"177\":1}}],[\"assume\",{\"1\":{\"159\":1,\"179\":1,\"180\":1,\"182\":1,\"183\":1,\"184\":2,\"185\":1,\"191\":1}}],[\"asyncgenerator\",{\"1\":{\"166\":2,\"167\":2}}],[\"asynccontextmanager\",{\"1\":{\"166\":2,\"167\":2}}],[\"asyncio\",{\"1\":{\"29\":1,\"30\":1,\"141\":1,\"159\":1,\"162\":2,\"172\":2}}],[\"async\",{\"0\":{\"67\":1,\"126\":1},\"1\":{\"14\":1,\"16\":1,\"18\":1,\"20\":1,\"22\":1,\"24\":1,\"25\":2,\"29\":1,\"30\":1,\"33\":1,\"36\":1,\"38\":1,\"39\":4,\"40\":1,\"66\":1,\"67\":4,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"111\":1,\"113\":1,\"118\":1,\"120\":1,\"125\":4,\"126\":5,\"128\":1,\"129\":1,\"131\":2,\"133\":2,\"135\":2,\"137\":2,\"139\":2,\"141\":1,\"143\":1,\"144\":1,\"146\":1,\"148\":1,\"150\":2,\"159\":1,\"162\":3,\"164\":3,\"166\":3,\"167\":3,\"170\":2,\"172\":2,\"174\":1,\"175\":1,\"177\":1,\"179\":1,\"180\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"190\":1,\"191\":1}}],[\"asyncpg\",{\"1\":{\"1\":1,\"154\":1}}],[\"ask\",{\"1\":{\"4\":1}}],[\"as\",{\"0\":{\"67\":1,\"112\":1,\"119\":1},\"1\":{\"1\":2,\"6\":1,\"14\":1,\"16\":1,\"18\":1,\"31\":1,\"36\":2,\"38\":1,\"39\":1,\"54\":2,\"55\":1,\"56\":1,\"66\":1,\"67\":1,\"111\":1,\"113\":4,\"118\":1,\"120\":4,\"126\":1,\"131\":2,\"133\":2,\"135\":1,\"137\":1,\"139\":1,\"155\":1,\"161\":1,\"163\":1,\"169\":1,\"171\":1,\"174\":1,\"177\":1,\"180\":1,\"182\":2,\"183\":1,\"190\":1,\"191\":1}}],[\"a\",{\"1\":{\"1\":3,\"4\":2,\"6\":2,\"18\":1,\"28\":9,\"46\":1,\"54\":5,\"55\":1,\"56\":2,\"59\":1,\"62\":1,\"64\":1,\"68\":1,\"81\":1,\"111\":1,\"113\":1,\"118\":1,\"120\":1,\"126\":1,\"128\":1,\"129\":1,\"141\":1,\"154\":2,\"159\":1,\"161\":1,\"163\":1,\"164\":2,\"166\":1,\"167\":6,\"169\":1,\"171\":1,\"174\":1,\"176\":4,\"177\":1,\"178\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
